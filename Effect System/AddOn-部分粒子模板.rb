#==============================================================================
# ■ Add-On 部分粒子模板 by 老鹰（http://oneeyedeagle.lofter.com/）
# ※ 本插件需要放置在【简单粒子系统-发散式 by老鹰】之下
#==============================================================================
# - 2019.9.13.11
#==============================================================================
# - 本插件为部分特别实现的粒子模板，可以参考并生成实例供调用
#==============================================================================

#==============================================================================
# ■ 粒子模板类 - 单点引力场
#==============================================================================
class Particle_Template_Single_Gravity < Particle_Template
  attr_accessor  :center, :gravity
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize
    super
    @center  = Vector.new(0, 0) # 引力中心
    @gravity = 5                # 引力常量
  end
  #--------------------------------------------------------------------------
  # ● 返回粒子每一次更新后的所受引力值
  #  可在此处进行每次更新时部分值的重设
  #--------------------------------------------------------------------------
  def global_force
    dx = @center.x - @particle.x
    dy = @center.y - @particle.y
    dx = rand * 2 - 1 if dx.to_i == 0
    dy = rand * 2 - 1 if dy.to_i == 0
    r = Math.sqrt(dx * dx + dy * dy)
    @particle.dir.x += @gravity * dx * 1.0 / r
    @particle.dir.y += @gravity * dy * 1.0 / r
    super
  end
end

#==============================================================================
# ■ 粒子模板类 - 跟随鼠标
#==============================================================================
class Particle_Template_Mouse < Particle_Template
  #--------------------------------------------------------------------------
  # ● 返回粒子生成时的左上角位置
  #--------------------------------------------------------------------------
  def xy
    Vector.new(Mouse.x, Mouse.y)
  end
end

#==============================================================================
# ■ 粒子模板类 - 绑定在地图上
#==============================================================================
class Particle_Template_OnMap < Particle_Template
  attr_accessor   :out_map_no_new
  attr_accessor   :map_grid_init
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize
    super
    @out_map_no_new  = false   # 出地图后不再生成新粒子？
    @old_total = @total        # 暂存之前的生成总数

    @map_grid_init = Vector.new(0,0)  # （地图坐标）粒子生成时基础所处地图格子位置
    # 利用父类 @pos_rect 作为在地图格子内的随机产生范围
  end
  #--------------------------------------------------------------------------
  # ● 返回区域的左上角作为粒子基础位置（Vector）
  #--------------------------------------------------------------------------
  def xy
    @particle.map_grid_init = @map_grid_init.dup
    get_par_window_xy_with_map_xy
  end
  #--------------------------------------------------------------------------
  # ● 返回粒子每一次更新后的所受引力值
  #  （在此处进行粒子参数实时修改）
  #--------------------------------------------------------------------------
  def global_force
    @particle.win_pos_init = get_par_window_xy_with_map_xy
    if @out_map_no_new
      r = Rect.new(0,0,Graphics.width,Grphics.height)
      @total = @particle.win_pos_init.in_rect?(r) ? @old_total : 0
    end
    super
  end
  #--------------------------------------------------------------------------
  # ● 返回粒子的基础窗口坐标（由其基础地图格子坐标）
  #--------------------------------------------------------------------------
  def get_par_window_xy_with_map_xy
    x = (@particle.map_grid_init.x - $game_map.display_x) * 32
    y = (@particle.map_grid_init.y - $game_map.display_y) * 32
    Vector.new(x + @pos_rect.x, y + @pos_rect.y)
  end
end

#==============================================================================
# ■ 粒子模板类 - 绑定在玩家脚底
#==============================================================================
class Particle_Template_OnPlayerFoot < Particle_Template_OnMap
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize
    super
    @pos_rect = Rect.new(8, 26, 16, 6)  # 在基础地图格子位置上的偏移值
  end
  #--------------------------------------------------------------------------
  # ● 返回区域的左上角作为粒子基础位置（Vector）
  #--------------------------------------------------------------------------
  def xy
    @map_grid_init.x = $game_player.last_x
    @map_grid_init.y = $game_player.last_y  # 显示的地图格子坐标
    super
  end
  #--------------------------------------------------------------------------
  # ● 返回粒子的Z值
  #--------------------------------------------------------------------------
  def z
    0
  end
end
class Game_Player
  attr_reader :last_x, :last_y
  #--------------------------------------------------------------------------
  # ● 移动一格
  #--------------------------------------------------------------------------
  alias eagle_particle_move_straight move_straight
  def move_straight(d, turn_ok = true)
    @last_x = x; @last_y = y # 存储移动前的位置
    eagle_particle_move_straight(d, turn_ok)
  end
end

#==============================================================================
# ■ 粒子模板类 - 指定坐标组和位图组（一一对应不重复使用）的特效集
#==============================================================================
class Particle_Template_BitmapNoDup < Particle_Template
  attr_accessor  :xys
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize
    super
    @xys = []  # 坐标集合Vector
    # 注意：需要设置好 位图总数目 和 @xys数组元素个数 和 @bitmaps数组元素个数 相同
  end
  #--------------------------------------------------------------------------
  # ● 返回粒子初始时的位置
  #--------------------------------------------------------------------------
  def xy
    #return super if @xys.empty?
    return @xys.shift
  end
  #--------------------------------------------------------------------------
  # ● 返回区域中的一个随机点作为粒子初始时offset位置（Vector）
  #--------------------------------------------------------------------------
  def xy_offset
    #return super if @xys.empty?
    return Vector.new(0, 0)
  end
  #--------------------------------------------------------------------------
  # ● 返回一个顺序的位图对象
  #--------------------------------------------------------------------------
  def bitmap
    return Cache.empty_bitmap if @bitmaps.empty?
    return @bitmaps.shift
  end
end

#==============================================================================
# ■ 粒子模板类 - 单反弹盒
#==============================================================================
class Particle_Template_ReboundBox < Particle_Template
  attr_accessor  :rebound_box, :rebound_factor
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize
    super
    @rebound_box  = Rect.new(0, 0, 1, 1) # 反弹盒范围（粒子遇到边界时便反向）
    @rebound_factor = -1.0   # 反弹因子，被反弹方向的速度的改变因子（乘法）
  end
  #--------------------------------------------------------------------------
  # ● 返回粒子每一次更新后的所受引力值
  #  可在此处进行每次更新时部分值的重设
  #--------------------------------------------------------------------------
  def global_force
    _x = @particle.x.to_i; _y = @particle.y.to_i
    _dir_x = @particle.dir.x; _dir_y = @particle.dir.y
    if (_y > @rebound_box.y && _y < @rebound_box.y + @rebound_box.height)
      if (_x - @rebound_box.x).abs < _dir_x
        @particle.x = @rebound_box.x
        @particle.dir.x *= @rebound_factor
      elsif (_x - @rebound_box.x - @rebound_box.width).abs < _dir_x
        @particle.x = @rebound_box.x + @rebound_box.width
        @particle.dir.x *= @rebound_factor
      end
    end
    if (_x > @rebound_box.x && _x < @rebound_box.x + @rebound_box.width)
      if (_y - @rebound_box.y).abs < _dir_y
        @particle.y = @rebound_box.y
        @particle.dir.y *= @rebound_factor
      elsif (_y - @rebound_box.y - @rebound_box.height).abs < _dir_y
        @particle.y = @rebound_box.y + @rebound_box.height
        @particle.dir.y *= @rebound_factor
      end
    end
    super
  end
end

#==============================================================================
# ■ 粒子模板类 - 精灵移入到指定位置
#==============================================================================
class Particle_Template_SpriteMoveIn < Particle_Template
  attr_accessor  :xys, :r_min, :r_max
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize
    super
    @start_opa       = 0  # 开始时透明度
    @end_opa         = 255  # 结束时透明度

    @xys = []  # 按序存储各个bitmap需要到达的目标位置
    @r_min = 10 # 初始位置与目标位置的最小偏移圆的半径
    @r_max = 100 # 最大偏移半径
  end
  #--------------------------------------------------------------------------
  # ● 返回粒子初始时的位置
  #--------------------------------------------------------------------------
  def xy
    return @xys.shift
  end
  #--------------------------------------------------------------------------
  # ● 返回区域中的一个随机点作为粒子初始时offset位置（Vector）
  #--------------------------------------------------------------------------
  def xy_offset
    return Vector.new(0, 0)
  end
  #--------------------------------------------------------------------------
  # ● 返回一个顺序的位图对象
  #--------------------------------------------------------------------------
  def bitmap
    return Cache.empty_bitmap if @bitmaps.empty?
    return @bitmaps.shift
  end
  #--------------------------------------------------------------------------
  # ● 返回随机的粒子存在时间
  #--------------------------------------------------------------------------
  def life
    t = super
    # 本质为按照dir的反方向进行移出（并且预先进行了位移）
    @particle.win_pos_init += (@particle.dir * t)
    @particle.dir *= -1
    t
  end
end
