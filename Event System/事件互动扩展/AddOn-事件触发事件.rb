#==============================================================================
# ■ Add-On 事件触发事件 by 老鹰（https://github.com/OneEyedEagle/EAGLE-RGSS3）
# ※ 本插件需要放置在【事件互动扩展 by老鹰】之下
#==============================================================================
$imported ||= {}
$imported["EAGLE-EventTriggerEvent"] = "1.0.0"
#==============================================================================
# - 2022.2.19.21
#==============================================================================
# - 本插件新增了事件之间的接触触发
#------------------------------------------------------------------------------
# 【思路】
#
# - 由于事件触发事件在默认设计中是不存在的，
#   如果使用并行触发或自动触发，又会影响事件的正常按键触发，
#   但如果使用另一个并行事件，在需要判定多个事件时，又非常复杂和冗余，
#   因此我设计了事件触发事件的特定指令，在触发时，将和玩家按键触发一样挂起其他内容
#
#------------------------------------------------------------------------------
# 【使用 - 事件触发事件（主动式）】
#
# - 在事件页中，编写下述的指令，来设置【自己接触指定事件】后，触发自己的内容
#
#    |-标签：接触事件 id
#    |
#    |-...其余事件指令...
#    |
#    |-标签：END
#
#   其中 接触事件 为识别文本，可通过 E2E_SELF_REGEXP 进行修改，不可缺少
#   其中 id 为 需要检测与之碰撞的事件的ID 或者 它的名字中含有的字符串
#
#      如编写标签“接触事件 5”，即为监测本事件是否与 5 号事件接触，
#         如果接触，则触发本事件的该互动，从“接触事件 5”执行到“END”为止
#
#      如编写标签“接触事件 NPC”，即为监测本事件是否与名称含有“NPC”的事件接触，
#         如果接触，则触发本事件的该互动，从“接触事件 NPC”执行到“END”为止
#
# - 注意：触发时，同样会挂起玩家的操作，即与玩家主动触发保持一致效果
#
# - 如果想绑定多个事件，可以通过以下方式：
#
#    |-标签：接触事件 id1
#    |-标签：接触事件 id2
#    |-标签：接触事件 id3
#    |
#    |-...其余事件指令...
#    |
#    |-标签：END
#
#   这是因为利用标签进行跳转执行时，不会受到其它标签的影响，
#     而只有遇到第一个END时才结束执行，
#     也因此，可以通过重复填写的方式，来制作与多个事件的接触判定
#
#---------------------------------------------------------------------------
# 【使用 - 事件触发事件（被动式）】
#
# - 在事件页中，编写下述的指令，来设置【自己被指定事件接触】后，触发自己的内容
#
#    |-标签：被事件接触 id
#    |
#    |-...其余事件指令...
#    |
#    |-标签：END
#
#   其中 被事件接触 为识别文本，可通过 E2E_BY_OTHERS_REGEXP 进行修改，不可缺少
#   其中 id 为 需要检测与之碰撞的事件的ID 或者 它的名字中含有的字符串
#
#      如编写标签“被事件接触 3”，即为监测 3 号事件是否与本事件接触，
#         如果被接触，则触发本事件的该互动，从“被事件接触 3”执行到“END”为止
#
#      如编写标签“被事件接触 <敌人>”，
#         即为监测本事件是否与名称含有“<敌人>”的事件接触，如果被接触，
#         则触发本事件的该互动，从“被事件接触 <敌人>”执行到“END”为止
#
# - 如果想绑定多个事件，方法同【事件触发事件（主动式）】
#
#---------------------------------------------------------------------------
# 【联动】
#
# - 由于本插件使用了与【事件消息机制 by老鹰】中的同样格式，
#   因此特别增加了调用事件消息进行执行的方式：
#
#    【事件触发事件（主动式）】中编写的标签修改为 接触事件p id
#
#    【事件触发事件（被动式）】中编写的标签修改为 被事件接触p id
#
#   其它内容与上述介绍一致
#
# - 在使用事件消息进行执行时，不再挂起玩家的移动
#
#==============================================================================

module EVENT_INTERACT
  #--------------------------------------------------------------------------
  # ● 【常量】定义事件指令-标签中的正则表达式
  #  当自己主动接触了目标事件时，自己触发的互动
  #--------------------------------------------------------------------------
  E2E_SELF_REGEXP = /^接触事件(p?) *(.*)/

  #--------------------------------------------------------------------------
  # ● 【常量】定义事件指令-标签中的正则表达式
  # 当自己被目标事件接触时，自己触发的互动
  #--------------------------------------------------------------------------
  E2E_BY_OTHERS_REGEXP = /^被事件接触(p?) *(.*)/

end
#=============================================================================
# ■ Game_Event
#=============================================================================
class Game_Event
  attr_reader  :priority_type,  :eagle_e2e_triggers2
  #--------------------------------------------------------------------------
  # ● 获取事件名称
  #--------------------------------------------------------------------------
  def name
    @event.name
  end
  #--------------------------------------------------------------------------
  # ● 初始化私有成员变量
  #--------------------------------------------------------------------------
  alias eagle_event2event_init_private_members init_private_members
  def init_private_members
    eagle_event2event_init_private_members
    # 主动接触别的事件时，触发自己的指定label [ [label, eid/ename, para] ]
    @eagle_e2e_triggers1 = []
    # 被接触时，触发自己的指定label
    @eagle_e2e_triggers2 = []
  end
  #--------------------------------------------------------------------------
  # ● 设置事件页的设置
  #--------------------------------------------------------------------------
  alias eagle_event2event_setup_page_settings setup_page_settings
  def setup_page_settings
    eagle_event2event_setup_page_settings
    # 解析可能是事件触发事件的标签
    get_value = lambda { |t| v = t.to_i; v != 0 ? v : t }
    @list.size.times do |i|
      next if @list[i].code != 118  # 不为标签指令
      label = @list[i].parameters[0]
      if label =~ EVENT_INTERACT::E2E_SELF_REGEXP
        v = [label, get_value.call($2), false]
        v[2] = true if $1 == "p"
        @eagle_e2e_triggers1.push(v)
        next
      end
      if label =~ EVENT_INTERACT::E2E_BY_OTHERS_REGEXP
        v = [label, get_value.call($2), false]
        v[2] = true if $1 == "p"
        @eagle_e2e_triggers2.push(v)
        next
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● 判定面前的事件是否被启动
  #--------------------------------------------------------------------------
  def check_event_trigger_touch_front
    super
    return eagle_check_e2e_triggers_pixel if $imported["EAGLE-PixelMove"]
    eagle_check_e2e_triggers
  end
  #--------------------------------------------------------------------------
  # ● 检查面前一格的事件的接触触发
  #--------------------------------------------------------------------------
  def eagle_check_e2e_triggers
    x2 = $game_map.round_x_with_direction(@x, @direction)
    y2 = $game_map.round_y_with_direction(@y, @direction)
    eagle_trigger_event_pos(x2, y2)
  end
  #--------------------------------------------------------------------------
  # ● 判断是否与事件接触
  #--------------------------------------------------------------------------
  def eagle_trigger_event_pos(x, y)
    $game_map.events.each do |eid, event|
      next if event.empty? || !event.pos?(x, y)
      next if event.priority_type != @priority_type
      f = eagle_check_trigger1(event)
      f = f || eagle_check_trigger2(event)
      return if f
    end
  end
  #--------------------------------------------------------------------------
  # ● 检查面前一格的事件的接触触发（兼容【像素级移动 by老鹰】）
  #--------------------------------------------------------------------------
  def eagle_check_e2e_triggers_pixel
    x, y = PIXEL_MOVE.get_rect_xy(@collision_rect, @direction)
    x2 = $game_map.round_x_with_direction(x + @x, @direction)
    y2 = $game_map.round_y_with_direction(y + @y, @direction)
    eagle_trigger_event_pos(x2, y2)
  end
  #--------------------------------------------------------------------------
  # ● 主动接触其他事件后，触发自己的label
  #--------------------------------------------------------------------------
  def eagle_check_trigger1(event2)
    @eagle_e2e_triggers1.each do |v|
      label = v[0]
      e = v[1]
      if (e.is_a?(Integer) && event2.id == e) ||
          (e.is_a?(String) && event2.name.include?(e))
        if v[2] && $imported["EAGLE-EventMsg"]
          msg(label)
          return true
        end
        start_ex(label)
        return true
      end
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ● 主动接触其他事件后，触发它的label
  #--------------------------------------------------------------------------
  def eagle_check_trigger2(event2)
    event2.eagle_e2e_triggers2.each do |v|
      label = v[0]
      e = v[1]
      if (e.is_a?(Integer) && self.id == e) ||
          (e.is_a?(String) && self.name.include?(e))
        if v[2] && $imported["EAGLE-EventMsg"]
          event2.msg(label)
          return true
        end
        event2.start_ex(label)
        return true
      end
    end
    return false
  end
end
