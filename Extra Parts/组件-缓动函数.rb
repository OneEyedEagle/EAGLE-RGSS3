#=============================================================================
# ■ 组件-缓动函数 by 老鹰（https://github.com/OneEyedEagle/EAGLE-RGSS3）
#=============================================================================
$imported ||= {}
$imported["EAGLE-EasingFunction"] = "1.0.1"
#=============================================================================
# - 2022.11.10.22 修复三角函数类型的缓动函数返回值错误的bug
#=============================================================================
# - 原型参考：https://easings.net/
#=============================================================================
# - 本插件提供了一部分全局通用的缓动函数，本质为原型参考的 Ruby 实现
#----------------------------------------------------------------------------
# - 参数传入：
#     方法的传入参数 x 统一为 当前时间*1.0/需耗费的全部时间 的比值（0~1之间的小数）
#      与原型 https://easings.net/ 中所描述的 Math function 一致
#
#     比如当前移动一共需要 10 帧，当前为第 1 帧，
#        则传入 x = 1 * 1.0 / 10 = 0.1
#     比如当前移动一共需要 20 帧，当前为第 16 帧，
#        则传入 x = 16 * 1.0 / 20 = 0.8
#
# - 方法调用（具体）：
#      比如想使用 easeInSine 的缓动方式，则可以调用 EasingFuction.easeInSine(x)
#
# - 方法调用（字符串）：
#      比如想使用 easeInSine 的缓动方式，则可以调用
#         EasingFuction.call("easeInSine", x)
#
# - 方法应用：
#     比如想对 精灵s（Sprite类） 的 不透明度（opacity） 属性 进行缓动变化，
#       其变化初值为 0，变化最终值为 255，缓动函数选择 easeInSine
#       假定 t 为当前帧计数，一共需20帧完成更新（即t从 0 开始，每帧增加1，直到 20）
#       则每一帧需要执行的操作为：
#
#          per = EasingFuction.easeInSine( t * 1.0 / 20 )
#          s.opacity = 0 + (255 - 0) * per
#          t += 1
#
# - 若想了解各个函数的实际缓动效果，请参考原型网站中的演示动画
#=============================================================================

module EasingFuction
  def self.call(type, x)
    method(type.to_s).call(x)
  end

  def self.easeInSine(x)
    # x 为 0~1 的浮点数，但三角函数需要传入 0~90 度
    return 1 - EAGLE.cos( x * 90 )
  end
  def self.easeOutSine(x)
    return EAGLE.sin( x * 90 )
  end
  def self.easeInOutSine(x)
    return - (EAGLE.cos(x * 90) - 1) / 2
  end

  def self.easeInQuad(x)
    return x * x
  end
  def self.easeOutQuad(x)
    return 1 - (1 - x) * (1 - x)
  end
  def self.easeInOutQuad(x)
    return x < 0.5 ? 2 * x * x : 1 - ((-2 * x + 2)**2) / 2;
  end

  def self.easeInCubic(x)
    return x * x * x;
  end
  def self.easeOutCubic(x)
    return 1 - (1 - x)**3;
  end
  def self.easeInOutCubic(x)
    return x < 0.5 ? (4 * x * x * x) : (1 - ((-2 * x + 2)**3) / 2);
  end

  def self.easeInQuart(x)
    return x * x * x * x;
  end
  def self.easeOutQuart(x)
    return 1 - ((1 - x)**4);
  end
  def self.easeInOutQuart(x)
    return x < 0.5 ? (8 * x * x * x * x) : 1 - ((-2 * x + 2)**4) / 2;
  end

  def self.easeInQuint(x)
    return x * x * x * x * x;
  end
  def self.easeOutQuint(x)
    return 1 - pow(1 - x, 5);
  end
  def self.easeInOutQuint(x)
    return x < 0.5 ? 16 * x * x * x * x * x : 1 - pow(-2 * x + 2, 5) / 2;
  end

  def self.easeInExpo(x)
    return x == 0 ? 0 : pow(2, 10 * x - 10);
  end
  def self.easeOutExpo(x)
    return x == 1 ? 1 : 1 - pow(2, -10 * x);
  end
  def self.easeInOutExpo(x)
    return 0 if x == 0
    return 1 if x == 1
    x < 0.5 ? pow(2, 20 * x - 10) / 2 : (2 - pow(2, -20 * x + 10)) / 2
  end

  def self.easeInCirc(x)
    return 1 - sqrt(1 - pow(x, 2));
  end
  def self.easeOutCirc(x)
    return sqrt(1 - pow(x - 1, 2));
  end
  def self.easeInOutCirc(x)
    return (1 - sqrt(1 - pow(2 * x, 2))) / 2 if x < 0.5
    return (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2
  end

  def self.easeInBack(x)
    c1 = 1.70158
    c3 = c1 + 1
    return c3 * x * x * x - c1 * x * x
  end
  def self.easeOutBack(x)
    c1 = 1.70158
    c3 = c1 + 1
    return 1 + c3 * pow(x - 1, 3) + c1 * pow(x - 1, 2)
  end
  def self.easeInOutBack(x)
    c1 = 1.70158
    c2 = c1 * 1.525

    return (pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2 if x < 0.5
    return (pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2
  end

  def self.easeInElastic(x)
    c4 = (2 * Math::PI) / 3;

    return 0 if x == 0
    return 1 if x == 1
    return -pow(2, 10 * x - 10) * EAGLE.sin((x * 10 - 10.75) * c4)
  end
  def self.easeOutElastic(x)
    c4 = (2 * Math::PI) / 3;

    return 0 if x == 0
    return 1 if x == 1
    return pow(2, -10 * x) * EAGLE.sin((x * 10 - 0.75) * c4) + 1
  end
  def self.easeInOutElastic(x)
    c5 = (2 * Math::PI) / 4.5;

    return 0 if x == 0
    return 1 if x == 1
    return -(pow(2, 20 * x - 10) * EAGLE.sin((20 * x - 11.125) * c5)) / 2 if x < 0.5
    return (pow(2, -20 * x + 10) * EAGLE.sin((20 * x - 11.125) * c5)) / 2 + 1
  end

  def self.easeInBounce(x)
    return 1 - easeOutBounce(1 - x)
  end
  def self.easeOutBounce(x)
    n1 = 7.5625
    d1 = 2.75
    return n1 * x * x if x < 1 / d1
    return n1 * (x-=1.5 / d1) * x + 0.75 if x < 2 / d1
    return n1 * (x-=2.25 / d1) * x + 0.9375 if x < 2.5 / d1
    return n1 * (x-=2.625 / d1) * x + 0.984375
  end
  def self.easeInOutBounce(x)
    return (1 - easeOutBounce(1 - 2 * x)) / 2 if x < 0.5
    return (1 + easeOutBounce(2 * x - 1)) / 2
  end

  def self.pow(x, t)
    x ** t
  end
  def self.sqrt(x)
    Math.sqrt(x)
  end
end

module EAGLE
  #--------------------------------------------------------------------------
  # ○ Sin查表（0~450度角）
  #  来源：OpenCV
  #  (https://github.com/opencv/opencv/blob/3.4.6/modules/imgproc/src/drawing.cpp)
  #--------------------------------------------------------------------------
  SinTable = [
    0.0000000, 0.0174524, 0.0348995, 0.0523360, 0.0697565, 0.0871557,
    0.1045285, 0.1218693, 0.1391731, 0.1564345, 0.1736482, 0.1908090,
    0.2079117, 0.2249511, 0.2419219, 0.2588190, 0.2756374, 0.2923717,
    0.3090170, 0.3255682, 0.3420201, 0.3583679, 0.3746066, 0.3907311,
    0.4067366, 0.4226183, 0.4383711, 0.4539905, 0.4694716, 0.4848096,
    0.5000000, 0.5150381, 0.5299193, 0.5446390, 0.5591929, 0.5735764,
    0.5877853, 0.6018150, 0.6156615, 0.6293204, 0.6427876, 0.6560590,
    0.6691306, 0.6819984, 0.6946584, 0.7071068, 0.7193398, 0.7313537,
    0.7431448, 0.7547096, 0.7660444, 0.7771460, 0.7880108, 0.7986355,
    0.8090170, 0.8191520, 0.8290376, 0.8386706, 0.8480481, 0.8571673,
    0.8660254, 0.8746197, 0.8829476, 0.8910065, 0.8987940, 0.9063078,
    0.9135455, 0.9205049, 0.9271839, 0.9335804, 0.9396926, 0.9455186,
    0.9510565, 0.9563048, 0.9612617, 0.9659258, 0.9702957, 0.9743701,
    0.9781476, 0.9816272, 0.9848078, 0.9876883, 0.9902681, 0.9925462,
    0.9945219, 0.9961947, 0.9975641, 0.9986295, 0.9993908, 0.9998477,
    1.0000000, 0.9998477, 0.9993908, 0.9986295, 0.9975641, 0.9961947,
    0.9945219, 0.9925462, 0.9902681, 0.9876883, 0.9848078, 0.9816272,
    0.9781476, 0.9743701, 0.9702957, 0.9659258, 0.9612617, 0.9563048,
    0.9510565, 0.9455186, 0.9396926, 0.9335804, 0.9271839, 0.9205049,
    0.9135455, 0.9063078, 0.8987940, 0.8910065, 0.8829476, 0.8746197,
    0.8660254, 0.8571673, 0.8480481, 0.8386706, 0.8290376, 0.8191520,
    0.8090170, 0.7986355, 0.7880108, 0.7771460, 0.7660444, 0.7547096,
    0.7431448, 0.7313537, 0.7193398, 0.7071068, 0.6946584, 0.6819984,
    0.6691306, 0.6560590, 0.6427876, 0.6293204, 0.6156615, 0.6018150,
    0.5877853, 0.5735764, 0.5591929, 0.5446390, 0.5299193, 0.5150381,
    0.5000000, 0.4848096, 0.4694716, 0.4539905, 0.4383711, 0.4226183,
    0.4067366, 0.3907311, 0.3746066, 0.3583679, 0.3420201, 0.3255682,
    0.3090170, 0.2923717, 0.2756374, 0.2588190, 0.2419219, 0.2249511,
    0.2079117, 0.1908090, 0.1736482, 0.1564345, 0.1391731, 0.1218693,
    0.1045285, 0.0871557, 0.0697565, 0.0523360, 0.0348995, 0.0174524,
    0.0000000, -0.0174524, -0.0348995, -0.0523360, -0.0697565, -0.0871557,
    -0.1045285, -0.1218693, -0.1391731, -0.1564345, -0.1736482, -0.1908090,
    -0.2079117, -0.2249511, -0.2419219, -0.2588190, -0.2756374, -0.2923717,
    -0.3090170, -0.3255682, -0.3420201, -0.3583679, -0.3746066, -0.3907311,
    -0.4067366, -0.4226183, -0.4383711, -0.4539905, -0.4694716, -0.4848096,
    -0.5000000, -0.5150381, -0.5299193, -0.5446390, -0.5591929, -0.5735764,
    -0.5877853, -0.6018150, -0.6156615, -0.6293204, -0.6427876, -0.6560590,
    -0.6691306, -0.6819984, -0.6946584, -0.7071068, -0.7193398, -0.7313537,
    -0.7431448, -0.7547096, -0.7660444, -0.7771460, -0.7880108, -0.7986355,
    -0.8090170, -0.8191520, -0.8290376, -0.8386706, -0.8480481, -0.8571673,
    -0.8660254, -0.8746197, -0.8829476, -0.8910065, -0.8987940, -0.9063078,
    -0.9135455, -0.9205049, -0.9271839, -0.9335804, -0.9396926, -0.9455186,
    -0.9510565, -0.9563048, -0.9612617, -0.9659258, -0.9702957, -0.9743701,
    -0.9781476, -0.9816272, -0.9848078, -0.9876883, -0.9902681, -0.9925462,
    -0.9945219, -0.9961947, -0.9975641, -0.9986295, -0.9993908, -0.9998477,
    -1.0000000, -0.9998477, -0.9993908, -0.9986295, -0.9975641, -0.9961947,
    -0.9945219, -0.9925462, -0.9902681, -0.9876883, -0.9848078, -0.9816272,
    -0.9781476, -0.9743701, -0.9702957, -0.9659258, -0.9612617, -0.9563048,
    -0.9510565, -0.9455186, -0.9396926, -0.9335804, -0.9271839, -0.9205049,
    -0.9135455, -0.9063078, -0.8987940, -0.8910065, -0.8829476, -0.8746197,
    -0.8660254, -0.8571673, -0.8480481, -0.8386706, -0.8290376, -0.8191520,
    -0.8090170, -0.7986355, -0.7880108, -0.7771460, -0.7660444, -0.7547096,
    -0.7431448, -0.7313537, -0.7193398, -0.7071068, -0.6946584, -0.6819984,
    -0.6691306, -0.6560590, -0.6427876, -0.6293204, -0.6156615, -0.6018150,
    -0.5877853, -0.5735764, -0.5591929, -0.5446390, -0.5299193, -0.5150381,
    -0.5000000, -0.4848096, -0.4694716, -0.4539905, -0.4383711, -0.4226183,
    -0.4067366, -0.3907311, -0.3746066, -0.3583679, -0.3420201, -0.3255682,
    -0.3090170, -0.2923717, -0.2756374, -0.2588190, -0.2419219, -0.2249511,
    -0.2079117, -0.1908090, -0.1736482, -0.1564345, -0.1391731, -0.1218693,
    -0.1045285, -0.0871557, -0.0697565, -0.0523360, -0.0348995, -0.0174524,
    -0.0000000, 0.0174524, 0.0348995, 0.0523360, 0.0697565, 0.0871557,
    0.1045285, 0.1218693, 0.1391731, 0.1564345, 0.1736482, 0.1908090,
    0.2079117, 0.2249511, 0.2419219, 0.2588190, 0.2756374, 0.2923717,
    0.3090170, 0.3255682, 0.3420201, 0.3583679, 0.3746066, 0.3907311,
    0.4067366, 0.4226183, 0.4383711, 0.4539905, 0.4694716, 0.4848096,
    0.5000000, 0.5150381, 0.5299193, 0.5446390, 0.5591929, 0.5735764,
    0.5877853, 0.6018150, 0.6156615, 0.6293204, 0.6427876, 0.6560590,
    0.6691306, 0.6819984, 0.6946584, 0.7071068, 0.7193398, 0.7313537,
    0.7431448, 0.7547096, 0.7660444, 0.7771460, 0.7880108, 0.7986355,
    0.8090170, 0.8191520, 0.8290376, 0.8386706, 0.8480481, 0.8571673,
    0.8660254, 0.8746197, 0.8829476, 0.8910065, 0.8987940, 0.9063078,
    0.9135455, 0.9205049, 0.9271839, 0.9335804, 0.9396926, 0.9455186,
    0.9510565, 0.9563048, 0.9612617, 0.9659258, 0.9702957, 0.9743701,
    0.9781476, 0.9816272, 0.9848078, 0.9876883, 0.9902681, 0.9925462,
    0.9945219, 0.9961947, 0.9975641, 0.9986295, 0.9993908, 0.9998477,
    1.0000000
  ]
  def self.sin(angle)
    angle += (angle < 0 ? 360 : 0)
    return SinTable[angle.to_i]
  end
  def self.cos(angle)
    angle += (angle < 0 ? 360 : 0)
    return SinTable[450 - angle.to_i]
  end
  def self.tan(angle)
    return sin(angle) / cos(angle)
  end
end # end of EAGLE
