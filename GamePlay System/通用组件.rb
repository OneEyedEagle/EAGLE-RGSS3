#=============================================================================
# ■ 通用组件 by 老鹰（http://oneeyedeagle.lofter.com/）
#=============================================================================
$imported ||= {}
$imported["EAGLE-Utils"] = true
#=============================================================================
# - 2019.5.23.0
#=============================================================================
# - 本插件提供了一系列的通用工具
#----------------------------------------------------------------------------
# ○ 绘制任意两点间的线段
#----------------------------------------------------------------------------
# - 全局脚本：
#      EAGLE.DDALine(bitmap, x0, y0, x1, y1[, d, type, c])
# - 参数解析：
#    bitmap - 将线段绘制在该位图上
#    x0, y0 - 以位图左上角为原点，线段起始点的坐标
#    x1, y1 - 以位图左上角为原点，线段终止点的坐标
#    d - 线段的宽度（水平或垂直的延展，未进行反走样处理）（可不填，默认1）
#    type - 线段类型的字符串，由0和1组成，0代表当前位置不绘制，1代表绘制，循环判定
#           如 "01" 将会一次不绘制一次绘制的反复进行（可不填，默认 "1"）
#    c - 线段的颜色 Color.new(r, g, b, a) （可不填，默认纯白色）
#=============================================================================

module EAGLE
  #--------------------------------------------------------------------------
  # ○ 绘制指定类型的线段
  #  type - 由0和1构成的字符串（其中1代表当前位像素绘制，0代表不绘制，将会循环判定）
  #         如 "1100" 将会在绘制两次后跳过两次
  #  算法来源：https://blog.csdn.net/Fitz1318/article/details/53914760
  #--------------------------------------------------------------------------
  def self.DDALine(bitmap, x0, y0, x1, y1, d = 1, type = "1",
    c = Color.new(255,255,255))
    dx = x1 - x0; dy = y1 - y0; x = x0; y = y0; t = 0; s = type.size
    epsl = (dx.abs > dy.abs ? dx.abs : dy.abs) # 取坐标中更大的差值为基准
    xIncre = dx * 1.0 / epsl; yIncre = dy * 1.0 / epsl # 计算坐标单次增量
    epsl.times do
      t = (t + 1) % s
      if type[t] != '0' # 0代表当前点不进行绘制
        if(y0 - y1 <= 0)
          d.times { |i| self.set_pixel((x+0.5).to_i, (y+0.5+i/2).to_i, c) }
        else
          d.times { |i| self.set_pixel((x+0.5+i/2).to_i, (y+0.5).to_i, c) }
        end
      end
      x += xIncre
      y += yIncre
    end
  end
end
