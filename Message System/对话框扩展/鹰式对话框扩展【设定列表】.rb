#encoding:utf-8
$imported ||= {}
$imported["EAGLE-MessageEX"] = "2.0.1"  # 2025.9.28.21
=begin
===============================================================================

    ┌--------------------------------------------------------------------┐
    ┆            ,""--..                                                 ┆
    ┆          ㄏ       `.                                               ┆
    ┆       _ノ ㄏō       \                                              ┆
    ┆      / ´             y                                             ┆
    ┆      \J==ノ  　 by.老鹰 (https://github.com/OneEyedEagle/EAGLE-RGSS3)
    └--------------------------------------------------------------------┘
    
     ■ 鹰式对话框扩展 Ver 2.0 【设定列表】
     
        此脚本通过简单的转义符命令，就能让对话框实现各种酷炫的动态效果，
        还拥有多种功能，且兼容其他类型的对话框。
        
     ┌ DEMO ------------------------------------------------------------┐
        Project1发布页： https://rpg.blue/thread-476586-1-1.html 
        Gitee备用地址 ： https://gitee.com/oneeyedeagle/EAGLE-RGSS3
     └------------------------------------------------------------------┘
     
     ▼ 什么是转义符？ ·==================================================

       在事件“显示文字”的输入框中，鼠标停留几秒，即可看到默认支持的转义符，
         如 \C[n] 绘制文字颜色 、 \I[n] 绘制图标等。

       转义符即为特别约定的、能够起到特殊功能的文本。

     =====================================================================
        -                                                             -
     
     ▼ 扩展转义符使用法则【必读!!】·======================================

       此脚本转义符均以 \ 符号开头，一般为 \code[param] 格式。
       
       · \code → “指令名”，各种功能的名称。
       
       · param → “参数串”，由 字母+数字 或 字母+$ 的复数组合构成。
                    实际写法为字母与数字紧贴、或加空格、或加=号，
                    例如：[id1] = [id 1] = [id=1]
                    多个参数可紧贴或加空格，
                    例如：[id1bg2] = [id1 bg2] = [id=1 bg=2]
                    使用时，只写需要变动的参数即可，无顺序要求。
                    
       ------------------------------------------------------------------
       □ 注意
       
       · 脚本中含有“预设参数”的字符串，可设置初始值，参数名形式为“:id”，
          在事件对话框中使用字符串时，省略“:”，直接写（字母+数字）即可；
          也可直接输入[1]以“预设参数”的值启用；[0]关闭。
          → 例如：\cwave[1] 等同于预设参数 \cwave[h2t4vy-1]
          
       · 参数串中带有【重置】标记：只生效一次，重置回脚本中的“预设参数”。
       · 参数串中带有【快捷】标记：可省略该字母，只写数字，不过必须置于第一位。
          → 例如：绘制图片 \pic 中快捷参数为 opa（不透明度），写法如下：
                   \pic[name|200w50] 等同于 \pic[name|w50opa200]
                
       · 与常见脚本不同，参数中的“是否”（true/false）需以（1/0）表示。
       · 参数中“$”代表nil，只有提及nil效果的参数，才可使用“$”。
       
       ·“指令名”和“参数串”中字母大小写皆可。
       
       ------------------------------------------------------------------
       □ 小键盘九宫格
       
       · 一些“参数串”中的参数（如原点）根据小键盘九宫格划分，见下图：
         ┌ 7 8 9 ┐
         │ 4 5 6 │  # 如 7 为左上角，5 为 中心， 2 为底部正中。
         └ 1 2 3 ┘ 
       
     =====================================================================
        -                                                             -
     
     ▼ 扩展转义符一览 ·==================================================
     
       方便搜索，快速跳转。建议用大写搜索，转义符大小写皆可。
     
     □ 环境类

       \env          - 环境预设（宏），便捷切换对话框的不同配置
       \temp         - 环境预设的重置指令
     
     □ 文本替换类

       \conv \M      - 便捷替换文本（宏）
       ALIAS常量     - 自定义转义符别名
       \rb           - 脚本替换文本（高级）
       \info         - 数据库对象替换文本
       \nl           - 换行符

     □ 绘制类

       \pic          - 绘制图片
      
     □ 控制类
     
       \c            - 文字颜色扩展
       \font         - 文字绘制设置（字体，字号，描边、发光等各种特效）
       \win          - 对话框窗口设置（窗口皮肤、位置、大小等；打字音、对齐方式等）
       \move         - 对话框窗口移动
       \auto         - 自动对话设置
       \pop          - 气泡对话框（在角色头顶显示的对话框）
       \face         - 脸图扩展：对话中切换脸图、循环动画等
       \facep        - 脸图扩展：移入移出等前置设置
       \facem        - 脸图扩展：执行指定动作
       \name         - 姓名框相关设置（窗口皮肤、预设等）
       \pause        - 暂停标记（小箭头）
       \shake        - 对话框震动
       \wait         - 等待扩展
       \ins          - 文本瞬间显示
       \hold         - 暂时保留当前对话框
       \close        - 强制关闭对话框
       \next         - 继续显示文本
       \clc          - 对话框清屏

     □ 文字特效类

       \cin          - 文字移入特效
       \cout         - 文字移出特效
       \uout         - [扩展]文字移出特效：位图消散
       \csin         - 文字“花屏”特效（正弦波浪扭曲）
       \cwave        - 文字“鱼泳”特效（上下起伏）
       \cswing       - 文字“摇摆”特效（本质精灵旋转）
       \czoom        - 文字“呼吸”特效（大小缩放）
       \cshake       - 文字“颤抖”特效（反复位移）
       \cshake2      - 文字“震颤”特效（频率更大的“颤抖”）
       \cflash       - 文字“闪烁”特效（本质精灵flash）
       \cmirror      - 文字“镜像”特效（横向反转）
       \cu           - [扩展]文字“蒸汽”特效
       \ctog         - 文字“杂音”特效（字符切换）
       \cneon        - 文字“霓虹”特效（文字变色）
       \cmc          - 文字“叠字”特效（在文字上叠加字符） 
       \cjump        - 文字“跳跃”特效
       \cfk          - 文字“明灭”特效
       \cfade        - 文字“消失”特效 
       \cg           - [扩展]文字“渐变色”特效
      
     □ 脚本类

       \eval         - 执行脚本处理（高级）
       \set          - 文字打组功能
       \setm         - 对分组文字启用特效

     =====================================================================
        -                                                             -
=end
#==============================================================================
#  ▼ 兼容其他对话框设置（true/false） ·
# -----------------------------------------------------------------------------
#   EAGLE_MSG_EX_COMPAT_MODE = true 时，本对话框默认不启用，以其他对话框为主。
#   此时，在事件脚本中调用以下命令，可令本对话框重新生效或禁用。
#
#   >>  $game_message.eagle_message = true/false
#  
#   □ 注意
#   对话框打开和关闭需要时间，若对话框切换后，旧对话框仍然显示，
#   请在切换对话框的事件脚本前添加【等待30帧】，确保旧对话框有时间关闭。
# -----------------------------------------------------------------------------
    EAGLE_MSG_EX_COMPAT_MODE = false
#==============================================================================



#==============================================================================
#                                 ■ 设定列表 ■ 
#==============================================================================
module MESSAGE_EX
#╭────────────────────────────────────────╮
#                                  - 基础设置 -

# -────────────────────────────────────────-
# 1▍ 按键判定：切换对话框 显示/隐藏
# -────────────────────────────────────────-
   def self.toggle_visible?
     Input.trigger?(:A) # 若不需要，请注释此句
   end
   
# -────────────────────────────────────────-
# 2▍ 按键判定：对话快进
# -────────────────────────────────────────-
#     如果使用了【Add-On 跳过对话】，该设置无效。
   def self.force_close?
     Input.press?(:CTRL) # 若不需要，请注释此句
   end
#  ◇ 更新对话框频率（按字数）
#     默认情况下，绘制一个文字便更新一次对话框。这在快进状态下，会出现卡顿。
#     因此调整为绘制N个文字后更新一次。
#     * 绘制完全部文字后必定更新一次。
   FORCE_CLOSE_N = 60

# -────────────────────────────────────────-
# 3▍ 内容滚动功能
# -────────────────────────────────────────-
#     当对话框的宽度或高度固定时，若文字超出对话框范围，自动开启内容滚动功能。
#     此时，在 等待按键 状态下，按住【方向键】即可滚动浏览对话框全部内容。
#
#  ◇ 内容滚动时的动画帧数
#     新增了一个缓动动画来获得空行，该设置即为缓动动画的帧数。

   CHARAS_SCROLL_OUT_FRAME = 12
   
#  ◇ 内容无需滚动时，按方向键继续对话（true/false）：
#     true  → 使用方向键也可以继续对话；
#     false → 以默认按键（确定键或取消键）继续对话。

   INPUT_NEXT_WITH_DIR4 = false
   
# -────────────────────────────────────────-
# 4▍ 预设文本
# -────────────────────────────────────────-
#     所有对话框打开时，“预设文本”将插入到对话开头。
#
#  ◇ 以下脚本指令有相同效果，在对话框之前加入（只生效一次）：
#
#     >>  $game_message.add_escape("这是需要显示的新文本")
#
#  ？ 示例
#     $game_message.add_escape("\\win[ali1]")
#        → 下一次的对话框中的文本“居中”绘制。
#     $game_message.add_escape("\\pop[0]")
#        → 下一次的对话框为pop类型，绑定在当前执行对话框的事件上。

#  □ 注意
#     由于解析问题，文本中请将 \ 替换成 \\ 。
#     当存在多条预设文本，将按照时间顺序，依次放入对话开头。
#
   ESCAPE_STRING_INIT = ""

# -────────────────────────────────────────-
# 5■ 对话框动态设置                                                    \FUNC ■
# -────────────────────────────────────────-
#     利用特定转义符，在对话框打开前设置部分功能。

#  ● \func[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数          ▼ [param]“参数串”一览（字母+数字组合）

   FUNC_PARAMS_INIT = {
     :open  => 2,       # 对话框使用“i”号打开方式
     :close => 2,       # 对话框使用“i”号关闭方式
                        # i: 0  → VA默认的上下打开关闭
                        #    1  → 淡入淡出
                        #    2  → 动态缩放；“21”仅纵向缩放，“22”仅横向缩放
                        #    3  → 动态滑入滑出
                        
     :anim  => 1,       # 是否（1/0）启用缓动函数动画效果
                        # 包括对话框打开、关闭、缩放等动态。
                        
     :aw    => 1,       # 是否（1/0）开启自动换行
                        #（简单换行，不考虑单词完整性、标点符号位于开头等情形）
                        
     :para  => 0,       # 是否（1/0）并行处理下一个事件指令
                        # 开启后，下一条是“显示选项/数值输入/物品选择处理”指令时，
                        # 同步打开以上指令框，只生效一次。
                        # □ 注意
                        # 当指令框关闭时，对话框强制同步关闭。
                        # 开启后，指令框“嵌入”对话框的设置会失效！
   }
#     ---------------------------------------------------------------------
#  ？ 示例
#     \func[open0close0] → VA默认的对话框打开关闭方式

# -────────────────────────────────────────-
# 6▍ 缓动函数动态效果
# -────────────────────────────────────────-
#     对话框打开、关闭、缩放等各个地方都使用了缓动函数，可以使移动更丝滑。
#
#  □ 使用脚本【组件-缓动函数】启用更多缓动函数；否则为默认缓动函数。
#     缓动函数名称及效果请参阅：https://easings.net/zh-cn

  def self.ease_value(type, x)
    if $imported["EAGLE-EasingFunction"]
      case type
      when :msg_open           # 对话框打开动态
        return EasingFuction.call("easeOutBack", x)
      when :msg_close          # 对话框关闭动态
        return EasingFuction.call("easeInBack", x)
      when :msg_xywh           # 通常情况下，对话框变更位置和大小的动态
        return EasingFuction.call("easeOutQuart", x)
      when :msg_vp             # 视图ox和oy变动时
                               #（文字绘制在可视范围外，或\clc清屏时）
        return EasingFuction.call("easeOutQuart", x)
      when :face_xy            # 脸图移动
        return EasingFuction.call("easeOutElastic", x)
      when :chara_xy           # 文字移动
        return EasingFuction.call("easeOutExpo", x)
      when :msg_open_slide     # 对话框打开动态：滑入（\func[i3]）
        return EasingFuction.call("easeOutBack", x)
      when :msg_close_slide    # 对话框关闭动态：滑出（\func[i3]）
        return EasingFuction.call("easeInBack", x)
      end
    end
    return 1 - 2**(-10 * x)    # 默认缓动函数（改为 return x 则为VA默认效果）
  end

  
#╰────────────────────────────────────────╯

#  ·                              ······                              ·

#╭────────────────────────────────────────╮
#                                - 环境类转义符 -

#  对话框有很多样式设置，但转义符是全局生效的，每次切换样式都要重新设置，很不方便。
#  使用该类转义符，每个环境可以保存一套样式设置，切换更方便。

# -────────────────────────────────────────-
# A■ 环境预设（宏）                                                     \ENV ■
# -────────────────────────────────────────-

#  ● \env[sym]   

#  · sym → [预设]环境设置的序号。
#            序号0 为默认环境（各个转义符的预设参数），也就是\env[0]。
#            若使用的序号不存在，将当前对话框的环境存储为对应序号。

#     ---------------------------------------------------------------------
#  ◇ [预设]环境设置 （请将转义符的 "\" 替换成 "\\"）

   DEFAULT_ENVS = {
   # 序号 => "内容",
     "0" => "",                              # 默认环境（固定、无法修改）
     "1" => "\\func[open3close3]",           # 范例1
     "底部" => "\\win[o2do-2dy-30w200h3]",   # 范例2
   }
#     ---------------------------------------------------------------------
#  ◇ 是否重置环境
#     在对话框绘制前，是否（true/false）重置到默认环境（\env[0]）。
#     → 为true 时：改变环境只对当前对话生效，新对话重置回默认环境；
#        为false时：改变环境为永久改变，需要重置时，必须手动\env[0]。
#     若填写 数字，将识别为开关序号。该开关开启时，才自动重置环境。

   S_ID_RESET_ENV = true
   
#     ---------------------------------------------------------------------
#  ◇ 文本中应用并保存环境

#  ● \env[sym|save]

#  · sym → 环境序号。
#            可以是上方[预设]环境没有的序号；若是[预设]环境中已有的序号，
#            临时覆盖同序号配置，在读档后会重置回[预设]环境的配置。
#            无法覆盖环境0，即\env[0|save]无效。

#  ？ 示例
#     \env[底部|save]\win[o2do-2dy-30] 
#       → 应用环境配置，且临时覆盖预设环境“底部”的配置，读档后重置。
#     \env[5|save]\win[o2do-2dy-30] 
#       → 应用环境配置，且新建并保存序号为“5”的预设环境，读档后不重置。

# -────────────────────────────────────────-
# B■ 结束当前环境，返回到之前的环境（当前对话完毕时触发）                \TEMP ■
# -────────────────────────────────────────-

#  ● \temp  

#     ---------------------------------------------------------------------
#  □ 特别说明
#     当对话文本中同时存在 \temp、\env[sym2]、\env[sym3|save] 时，
#     生效顺序如下（假设当前环境为 sym1）：
#     1. 对话开始：
#        \temp 记录之前的环境为 sym1 ；
#        \env[sym2] 将读取并应用 sym2 环境，此时环境为 sym2；
#     2. 对话结束：
#        \env[sym3|save] 将对话框绘制完成后的环境存入 sym3，并应用 sym3 环境；
#        \temp 生效，将环境重置为 sym1 环境。
#     3. 下一个对话的环境便为 sym1 。

#╰────────────────────────────────────────╯

#  ·                              ······                              ·

#╭────────────────────────────────────────╮
#                              - 文本替换类转义符 -
#
#  此类别的转义符将在绘制开始前，进行文本替换。
#  按照脚本中从上到下的排列顺序进行替换，请注意相互之间的嵌套关系。

# -────────────────────────────────────────-
# A■ 便捷替换文本（宏）                                                \CONV ■
# -────────────────────────────────────────-

#  ● \conv[n] 或 \M[n]       · n → 替换文本设置 中的序号。

#     ---------------------------------------------------------------------
#  ◇ 替换文本设置 （请将转义符的 "\" 替换成 "\\"）
#                  （若有转义符用 <> 代替 []，则将 "\" 替换成 "\e"，如姓名框）

   CONVERT_ESCAPE = {
   # 序号 => "替换文本",
     "1" => "\\env[1]\\shake[p3s7t15]哪里有1？！\\TEMP",
     "金币" => "\\I[361]\\cflash[1]\\C[17]金币\\cflash[0]",
     "底部" => "\\win[ali0dw1dh1o2do-2dx0dy-60]\\pause[do0o4]\\temp",
     "顶部" => "\\win[ali0dw1dh1o8do-8dx0dy60]\\pause[do0o4]\\temp",
   }
#     ---------------------------------------------------------------------
#  ◇ 可在事件脚本 新增/覆盖 预设替换文本：
#     也可以在脚本页中新增 module MESSAGE_EX 和 end ，在其中添加设置。

   CONVERT_ESCAPE["系统"] = "\\win[ali1dw1dh1o5do-5dx0dy0]\\pause[do2o5]\\temp"
#     ---------------------------------------------------------------------
#  ？ 示例
#     顺序编写事件：
#     1. 事件脚本：MESSAGE_EX::CONVERT_ESCAPE["测试用"] = "这是一句测试语句"
#     2. 编写对话：测试对话为\conv[测试用]。
#     → 实际对话显示：测试对话为这是一句测试语句。

# -────────────────────────────────────────-
# B▍ 转义符名称替换（别名）
# -────────────────────────────────────────-
#     别名与原名都可使用，方便个人习惯的设置。
#  □ 注意 ：不用加"\"，大小写通用，只能替换带 [] 的转义符。

   ALIAS_ESCAPE_CHARAS = {
   # 别名 => 转义符名称
     "na" => "name",   # 名称转义符别名 \na[] = \NA[] = \name[]
     "pp" => "env[0]\\cin[dx0]\\cout[dy0]\\func[open2close2]\\pop"
   }
   
# -────────────────────────────────────────-
# C▍ 转义符指定项替换（别名）
# -────────────────────────────────────────-
#     别名与原名都可使用，方便个人习惯的设置。
#  □ 注意 ：不用加"\"，大小写通用，只能替换带 [] 的转义符。

   ALIAS_ESCAPE_CHARA_PARAM = {
   # 别名 => [转义符名称, 转义符中的某一项],
     "AL" => ["win", "ali"],  # 使用示例：\AL[1] = \al[1] = \win[ali1]
   }
   
# -────────────────────────────────────────-
# D■ 脚本替换文本（高级）                                                \RB ■
# -────────────────────────────────────────-

#  ● \rb{string}

#  · string → Ruby脚本语句，可以用“ ; ”分隔多句，不可{x{x}}花括号套娃。
#               可用 s 代替 $game_switches（开关） v 代替 $game_variables（变量）
#               event 代表执行当前对话框的事件（Game_Event对象）。

#  ？ 示例
#     顺序编写事件：
#     1. 编写事件：1号变量赋值“1”，2号变量赋值“2”
#     2. 编写对话：这是一句测试用对话，都已经说了\rb{v[1]+v[2]}次了！
#     → 实际对话显示：这是一句测试用对话，都已经说了3次了！

# -────────────────────────────────────────-
# E■ 数据库对象替换文本                                                \INFO ■
# -────────────────────────────────────────-

#  ● \info[type+id,n]  # type → 数据类型
                        #         s = 技能，i = 物品，w = 武器，a = 防具
                        # id   → 数据序号
                        # n    → 绘制类型（可省略，取默认0）
                        #         0 = 绘制图标+名称，1仅绘制图标，2仅绘制名称
                        
#  □ 注意 ：type+id是字母+数字格式，实际编写时不需要写加号，参考示例。

#  ？ 示例
#     编写对话：1号物品是\info[i1]，2号武器的名称是\info[w2,2]。
#     → 实际对话显示：1号物品是【图标】恢复剂，2号武器的名称是战斧。

# -────────────────────────────────────────-
# F■ 换行符替换文本（等同于手动回车换行）                                 \NL ■
# -────────────────────────────────────────-

#  ● \nl

#  □ 注意 ：由于编辑器限制，部分文本框会忽略文本中输入的\n，因此添加该转义符。

#╰────────────────────────────────────────╯

#  ·                              ······                              ·

#╭────────────────────────────────────────╮
#                                - 绘制类转义符 -

#  ────────────────────────────────────────
#  ■ 绘制图片                                                          \PIC ■
#  ────────────────────────────────────────

#  ● \pic[filename|param]

#  · filename → 图片名称，可省略扩展名。（图片存放于 Grphics/Pictures 目录下）
                              
#  · param    ▼ 设定参数（字母+数字）：（可省略取默认值）
#                 w   → 图片宽度（默认取图片宽度）
#                 h   → 图片高度（默认取图片高度）
#                 opa → 【快捷】图片的不透明度（0~255）（默认255）
                              
#  □ 指引 ：【快捷】标记说明请参阅《扩展转义符使用法则》

#  ？ 示例
#     1. 编写对话：看看猫\pic[猫猫快乐|w=50 h=50]。 →宽50，高50。
#     2. 编写对话：看看猫\pic[猫猫快乐|200w50h50]。 →不透明度200，宽50，高50。

#╰────────────────────────────────────────╯

#  ·                              ······                              ·

#╭────────────────────────────────────────╮
#                                - 控制类转义符 -

#  □ 注意    - 为了确保对话框能提前落位，而不出现位置闪现，
#               将先处理完位于开头的\win、\pop转义符，再开始绘制文本。
#             - 参数中的“是否”（true/false）需以（1/0）表示。
#             - 参数中“$”代表nil，只有提及nil效果的参数，才可使用“$”。

# -────────────────────────────────────────-
# A■ 文字颜色扩展（默认的\c[n]）                                          \C ■
# -────────────────────────────────────────-

#  ● \c[n]

#  · n → 除了VA默认的索引颜色（数字）外，还可输入下方参数设置的序号。
#          序号仅可为字母，数字与汉字无效。
#          n 为 -1 时，重置回“默认颜色”，不透明度也重置为 255。
#     ---------------------------------------------------------------------
#  ◇ 默认颜色
#    （当前对话框结束后自动重置为默认颜色。VA默认为0，也可写入参数设置的序号）

   DEFAULT_COLOR_INDEX = 0
   
#     ---------------------------------------------------------------------
#  ◇ 参数设置

   TEXT_COLORS = {
   # 序号 => Color.new(R, G, B),
     "pink" => Color.new(255, 187, 217),
     "gold" => Color.new(255, 215, 0),
   }
# -────────────────────────────────────────-
#╔════════════════════════════════════════╗
# B■ 文字绘制设置                                                     \FONT ■
#  ────────────────────────────────────────

#  ● \font[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数          ▼ [param]“参数串”一览（字母+数字组合）

   FONT_PARAMS_INIT = { 
     :name => nil,      # 字体名称序号（见下方[预设]）；
                        #  * 若为 nil（$），则为VA默认字体
     :size => nil,      #【快捷】字号。若为 nil（$），则为VA默认字号
     :ca   => 255,      # 字体不透明度（0~255）
     :i    => nil,      # 斜体 是否（1/0）
     :b    => nil,      # 加粗 是否（1/0）
     :s    => nil,      # 阴影 是否（1/0）
     :o    => nil,      # 描边 是否（1/0）
     :or   => nil,      # 描边颜色 R（0~255）
     :og   => nil,      # 描边颜色 G（0~255）
     :ob   => nil,      # 描边颜色 B（0~255）
     :oa   => nil,      # 描边颜色 A（0~255）
     :p    => 0,        # 底纹（0不绘制，1边框，2实心方框）
     :pc   => 0,        # 底纹颜色（同\c[n]的索引颜色）
     :l    => 0,        # 外发光 是否（1/0）（若开启，则强制关闭阴影和边框）
     :lc   => 0,        # 外发光颜色（同\c[n]的索引颜色）
     :lp   => 2,        # 外发光强度
     :d    => 0,        # 删除线 是否（1/0）
     :dc   => 0,        # 删除线颜色（同\c[n]的索引颜色）
     :u    => 0,        # 下划线 是否（1/0）
     :uc   => 0,        # 下划线颜色（同\c[n]的索引颜色）
     :k    => 0,        # 文字破碎 是否（1/0）
     :kv   => 50,       # 破碎概率（百分比，数字越大，文字破碎效果越明显）
                        #  （文字破碎请参考 http://www.whiteflute.org/wfrgss/）
#      c   => n         # 字体颜色（同上方\c[n]）

   } #       □ 指引 ：【快捷】标记说明请参阅《扩展转义符使用法则》
#     ---------------------------------------------------------------------
#  ◇ [预设]字体名称（:name）

   INDEX_TO_FONT = {
   # 序号 => 字体名称,
     1 => "黑体",
   }
#╚════════════════════════════════════════╝
   
#╔════════════════════════════════════════╗
# C■ 对话框窗口设置                                                    \WIN ■
#  ────────────────────────────────────────

#  ● \win[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   WIN_PARAMS_INIT = {
#  ·窗口属性相关
     :z    => 200,     # 窗口的Z值（仅正整数有效）
     :skin => 0,       # 窗口皮肤序号（见下方[预设]）
     :bg   => nil,     # 图片窗口皮肤序号（见下方[预设]）
                       #  * 覆盖:skin，只对“窗口背景→普通窗口”生效。
     :bgo  => 5,       # 图片窗口皮肤的原点（对应小键盘九宫格 | 默认值为7 左上角）
     :bgx  => 0,       # 图片窗口皮肤的水平偏移值（正数向右，负数向左）
     :bgy  => 0,       # 图片窗口皮肤的垂直偏移值（正数向下，负数向上）
#  ·窗口位置相关
     :o    => 7,       #【快捷】窗口内容原点（对应小键盘九宫格 | 默认值为7 左上角）
     :x    => nil,     # 原点 x 坐标。若为 nil（$），则为编辑器内设置
     :y    => nil,     # 原点 y 坐标。若为 nil（$），则为编辑器内设置
     :do   => 0,       # 屏幕画面的位置原点（覆盖x/y的设置）
                       #  * 对应小键盘九宫格（负数）| 如-7 画面左上角，0 不启用
     :dx   => 0,       # 窗口的水平偏移值（正数向右，负数向左）
     :dy   => 0,       # 窗口的垂直偏移值（正数向下，负数向上）
     :fix  => 0,       # 位置修正 是否（1/0），防止对话框跑出屏幕
#  ·窗口大小相关
     :w    => 0,       # 窗口内容的宽度（不含边框）值 > 0时，dw和fw均无效
     :h    => 0,       # 窗口内容的高度（不含边框）值 > 0时，dw和fw均无效
                       #  * 值 < 行高时，将作为行数乘以行高
     :dw   => 0,       # 窗口宽度随文字动态调整 是否（1/0）
     :fw   => 0,       # 窗口宽度为所有文字绘制完成时的宽度 是否（1/0）
                       #   若启用，dw无效
     :wmin => 0,       # 窗口内容宽度的最小值（启用dw/fw时才生效）
     :wmax => 0,       # 窗口内容宽度的最大值（启用dw/fw时才生效）
                       #  * 有脸图时内容宽度自动增加脸图宽度
     :dh   => 0,       # 窗口高度随文字动态调整 是否（1/0）
     :fh   => 0,       # 窗口高度为所有文字绘制完成时的高度 是否（1/0）
     :hmin => 0,       # 窗口内容高度的最小值（启用dh/fh时才生效）
     :hmax => 0,       # 窗口内容宽度的最大值（启用dh/fh时才生效）
                       #  * 值 < 行高时，将作为行数乘以行高
#  ·文本显示相关
     :se   => 0,       # 打字音类型序号（见下方[预设]）
     :ali  => 0,       # 文本对齐方式（0左对齐，1居中对齐，2右对齐）
     :ck   => 0,       # 文字间距
     :lh   => nil,     # 行高。若为 nil（$），则取当前字号
     :ld   => 4,       # 行间距
     :cwi  => 2,       # 单个文字显示后的停顿帧数（最小值0）
     :cwo  => 0,       # 单个文字消失前的停顿帧数（最小值0）
     :cor  => 0,       # 所有文字移出的顺序（0正序，1逆序，2乱序，默认0）
     :cfast => 1,      # 允许对话快进 是否（1/0）
     :cdl  => 0,       # 文本左边距（兼容 旧版本为:cdx）
     :cdu  => 0,       # 文本上边距（兼容 旧版本为:cdy）
     :cdr  => 0,       # 文本右边距（兼容 旧版本为:cdw）
     :cdd  => 0,       # 文本下边距（兼容 旧版本为:cdh）
     
   } #      □ 指引 ：【快捷】标记说明请参阅《扩展转义符使用法则》
   
#     ---------------------------------------------------------------------
#  ◇ 窗口背景的不透明度（0~255）（默认200）

   WINDOW_BACK_OPACITY = 200
   
#     ---------------------------------------------------------------------
#  ◇ [预设]窗口皮肤（:skin）         > 素材文件存储于 Graphics/System 目录下

   INDEX_TO_WINDOWSKIN = {
   # 序号 => 素材文件名（可省略后缀）
     0 => "Window",    # VA默认皮肤名称
   }
#     ---------------------------------------------------------------------
#  ◇ [预设]图片窗口皮肤（:bg）       > 素材文件存储于 Graphics/System 目录下

   INDEX_TO_WINDOW_BG = {
   # 序号 => 素材文件名（可省略后缀）
     0 => "",
   }
#     ---------------------------------------------------------------------
#  ◇ [预设]打字音类型（:se）                > 素材文件存储于 Audio/SE 目录下

   INDEX_TO_SE = {
   # 数字 => 素材文件名, 音量, 音调
     0 => ["",  0, 100],         # 无打字音，默认项（不推荐修改）
     1 => ["Cursor1", 40, 150],  # 示例1
   }
#  ◇ 打字音间隔（帧）
   CAHRA_SE_N = 4
   
#  ◇ 根据字符使用不同打字音
   CAHRA_SE_ADJUST = {
   # 字符组 => 打字音类型序号，
     ['…',] => 0,                # 例：文中省略号不播放打字音
   }
#     ---------------------------------------------------------------------
#  ？ 示例
#     1. 编写对话：\win[o5 do-5 dw1dh1]动态文字，居中对话框。
#     2. 编写对话：\win[o=2 do=-2 dy=-20 fw1fh1]动态文字，居下对话框。
#╚════════════════════════════════════════╝

# -────────────────────────────────────────-
# D■ 对话框窗口移动                                                    \MOVE ■
# -────────────────────────────────────────-

#  ● \move[param]

#  · param    ▼ 设定参数（字母+数字）：（可省略取默认值）
#                 t   → 移动所耗时间（默认20帧）
#                 x   → 移动目的地 x 坐标（为0时，重置为 \win 中的 :x 值）
#                 y   → 移动目的地 y 坐标（为0时，重置为 \win 中的 :y 值）
#                 dx  → 目的地的水平偏移值（正数向右，负数向左）（默认0）
#                 dy  → 目的地的垂直偏移值（正数向下，负数向上）（默认0）

#  □ 注意
#     若设置了 \win[do=非0数字] 或启用了 \pop，该移动指令无效。
#     在对话框关闭时才会重置位置。

#  ？ 示例
#     编写对话：这是测试对话，\move[dx=40 dy=30]对话框移动了！
#     →实际效果：显示完“这是测试对话，”后，对话框移动，再显示剩余文字。

# -────────────────────────────────────────-
# E■ 自动对话设置                                                      \AUTO ■
# -────────────────────────────────────────-

#  ● \auto[t]        · t → 自动对话间隔时间（帧）（默认nil）

#     ---------------------------------------------------------------------
#  ◇ 默认参数        （未使用\auto指令、或t为 nil 时，取此默认值）
   
   WIN_AUTO_T = nil   # nil → 不启用； 数字 → 等同于 t 帧
   
#     ---------------------------------------------------------------------
#  ◇ 启用时 显示窗 的设置

   WIN_AUTO_TEXT = "自动播放"   # 显示的文本
   WIN_AUTO_TEXT_COLOR1 = Color.new(0,0,0,255)        # 文本颜色（初始）
   WIN_AUTO_BG_COLOR1   = Color.new(255,255,255,150)  # 窗口颜色（初始）
   WIN_AUTO_TEXT_COLOR2 = Color.new(255,255,255,150)  # 文本颜色（反色）
   WIN_AUTO_BG_COLOR2   = Color.new(0,0,0,150)        # 窗口颜色（反色）
   WIN_AUTO_W  = 100            # 窗口宽度
   WIN_AUTO_H  = 40             # 窗口高度
   WIN_AUTO_O  = 9              # 窗口显示原点（对应小键盘九宫格 | 9 右上角）
   WIN_AUTO_DO = -9             # 画面原点（对应小键盘九宫格 -9~9）
                                #   正数为对话框画面位置；负数为屏幕画面位置
                                #   如 3 为对话框右下角，-9 为屏幕右上角
   WIN_AUTO_DX = 0              # 窗口的水平偏移值（正数向右，负数向左）
   WIN_AUTO_DY = 0              # 窗口的垂直偏移值（正数向下，负数向上）

#╔════════════════════════════════════════╗
# F■ 气泡对话框                                                        \POP ■
#  ────────────────────────────────────────
   
#  ● \pop[param]
   
#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）
   
   POP_PARAMS_INIT = {
#  ·非预设参数
#   id    => n        【重置】【快捷】说话目标ID
                       # 地图上：为 0 时 → 当前事件
                       #        正数 → 事件ID。ID不存在时，取当前事件
                       #        负数 → 数据库角色ID，ID不存在或不在队伍时取队长ID
                       # 战斗中：正数 → 敌群中敌人ID，不存在则无效
                       #                 * 不是数据库敌人ID，是敌群中的序号
                       #        负数 → 我方参战者数据库角色ID，不存在则无效
                       # * VA默认战斗中负数无效，只有参战者坐标XY不为0时，才能显示
                       
#   mx/my => n        【重置】指定地图坐标XY的说话目标ID（若设置了id，该设置无效）
                       # * 编辑器地图中格子的坐标XY，非画面XY
   
#  ·窗口属性相关
    :z    => nil,      # 窗口的Z值（仅正整数有效）* 若为 nil（$），取\win同值
    :skin => 0,        # 窗口皮肤序号（同 \win 中[预设]窗口皮肤）
                       #  * 若为 nil（$），与 \win 的窗口皮肤同步
    :bg   => nil,      # 图片窗口皮肤序号（同 \win 中[预设]图片窗口皮肤）
    :bgo  => 7,        # 图片窗口皮肤的原点（对应小键盘九宫格 | 默认值为7 左上角）
    :bgx  => 0,        # 图片窗口皮肤 x 坐标偏移值
    :bgy  => 0,        # 图片窗口皮肤 y 坐标偏移值
#  ·窗口位置相关
    :o    => nil,      # 窗口显示原点（对应小键盘九宫格）
                       #  * 若为 nil（$），取(10 - :do)值
    :do   => 8,        # 基于说话目标的原点（对应小键盘九宫格）
                       #  * 如 1 显示在目标左下角；默认 8 在目标正上方
    :d    => 0,        # 对话框与目标原点do的距离微调（正数远离原点，负数靠近原点）
    :dx   => 0,        # 窗口的水平偏移值（正数向右，负数向左）
    :dy   => 0,        # 窗口的垂直偏移值（正数向下，负数向上）
    :fix  => 0,        # 位置修正 是否（1/0），防止对话框跑出屏幕
#  ·窗口大小相关
    :w    => 0,        # 窗口内容宽度（若设置，dw/fw均失效）
    :h    => 0,        # 窗口内容高度（若设置，dh/fh均失效）
                       #  * 值 < 行高时，将作为行数乘以行高
    :dw   => 0,        # 动态窗口宽度（随文字绘制实时更新）是否（1/0）
    :fw   => 1,        # 固定窗口宽度（文字绘制完毕时的窗口宽度）是否（1/0）
                       #  * 启用时，dw 无效
    :dh   => 1,        # 动态窗口高度（随文字绘制实时更新）是否（1/0）
    :fh   => 0,        # 固定窗口高度（文字绘制完毕时的窗口高度）是否（1/0）
                       #  * 启用时，dh 无效
#  ·“小嘴”指向箭头
    :tag  => 0,        # 小嘴的皮肤序号（见下方[预设]）（为 0 时不启用）
    :td   => 1,        # 小嘴与目标原点do的距离微调（正数远离原点，负数靠近原点）
    
   } #      □ 指引 ：【重置】【快捷】标记说明请参阅《扩展转义符使用法则》

#     ---------------------------------------------------------------------
#  ◇ [预设]“小嘴”皮肤（:tag）      > 素材文件存储于 Graphics/System 目录下

   INDEX_TO_WINDOWTAG = {
   # 序号 => 素材文件名（可省略后缀）
     0 => nil,            # 不启用
     1 => "Window_Tag",   # 默认
   }
#     ---------------------------------------------------------------------
#  ◇ 窗口皮肤序号 对应使用 [预设]“小嘴”皮肤的序号

   WINDOWSKIN_TO_WINDOWTAG = {
   # 窗口皮肤序号 => 小嘴序号，
     -1 => 1,
   }
   
#  □ “小嘴”指向箭头素材规格
#        ┌ 7 8 9 ┐
#        │ 4 5 6 │  # 素材划分区域编号
#        └ 1 2 3 ┘ 
#  ├ 规格：3×3等分，如上图，图片宽高随意。
#  ├ 根据 \pop 中的 :do 值，自动选择区域编号的素材。编号与 :do 对应方向相反。
#     → 比如 do=8 时，气泡对话框在目标正上方，小嘴在气泡对话框底部，
#        使用 2 号区域的素材。可参考默认素材的指向。
#  ├ 小嘴的坐标不影响气泡对话框的位置，可设置d/dx/dy参数来微调对话框位置。

#     ---------------------------------------------------------------------
#  ？ 示例
#     编写对话：\pop[-1]这是测试对话。
#     →实际效果：默认VA设置下会在玩家头顶显示气泡对话框。
#╚════════════════════════════════════════╝

#╔════════════════════════════════════════╗
# G■ 脸图扩展     
#  ────────────────────────────────────────
#     对话框中的脸图的尺寸不受限制。
#     可自定义每张素材文件的规格（默认同VA配置2行x4列）。
#     当素材文件名含“_数字1（行数）x数字2（列数）”（x为字母x），生效自定义规格。
#     →例：VA默认2行x4列，可写作“Actor1_2x4.png”与“Actor1.png”规格相同。

# -────────────────────────────────────────-
# 0▍ 脸图（默认规格）是否（true/false）嵌入对话框
# -────────────────────────────────────────-
#     此设置只针对默认尺寸脸图起效，超过尺寸的脸图不受限制。
#     VA默认规格：每张头像为 96×96 像素。

   FORCE_WIN_H_BIGGER_THAN_DEFAULT_FACE = true
   
# -────────────────────────────────────────-
# 1■ 脸图相关设置                                              \FACEP  \FACE ■
# -────────────────────────────────────────-
   
#  ● \facep[param]       - 对话框开启前设置脸图

#  ● \face[name|param]   - 脸图的动态设置

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   FACE_PARAMS_INIT = {
   
#  ● \facep[param]   ▼ 对话框开启前设置脸图

#     t   => n ,       # 脸图移动的耗时（默认20帧）
     :dir =>  0,       #【快捷】脸图的显示位置（0对话框左侧，1对话框右侧）
     :m   =>  0,       # 脸图镜像反转 是否（1/0）
     :it  => 15,       # 脸图移入所需帧数
     :ot  => 10,       # 脸图移出所需帧数
     :dx  =>  2,       # 水平偏移值（正数向右，负数向左）
     :dy  => -2,       # 垂直偏移值（正数向下，负数向上）
     :dw  =>  8,       # 嵌入对话框内时，脸图宽度的增量（默认0）
     :z   =>  1,       # 以对话框\win的:z为基础上的增量值
                       #  * 默认 1，于对话框之上；若为 -1，于对话框之下
                       
#  ● \face[name|param]    ▼ 脸图的动态设置

#     name=> str,      #【重置】脸图文件名称变更
#                      # * 如果没有写 | 符号，则认定为不更改所用的脸图文件
#     i   => n ,       #【重置】【快捷】脸图索引序号变更
#     ls  => n ,       #【重置】脸图循环播放的开始序号（默认 -1 不启用）
#     le  => n ,       #【重置】脸图循环播放的结束序号（默认 -1 不启用）
     :lt  => 30,       # 循环播放时，每两帧之间的等待帧数
     :lw  => 60,       # 循环播放时，每次循环结束时的等待帧数，为nil（$）时不循环
     
   } #      □ 指引 ：【重置】【快捷】标记说明请参阅《扩展转义符使用法则》

# -────────────────────────────────────────-
# 2■ 脸图执行指定动作                                                 \FACEM ■
# -────────────────────────────────────────-

#  ● \facem[str|param]
   
#  · str     ▼ 脸图动作序号（字母）
#                in    → 脸图淡入（仅可设置 it → 脸图移入所需帧数）
#                out   → 脸图淡出（仅可设置 ot → 脸图移出所需帧数）
#                jump  → 脸图跳跃一次（无可设定参数）
#                move  → 脸图移动到指定位置（可设定参数见 param）
                              
#  · param   ▼ 设定参数（数字）：（可省略取默认值）
#                         x/y   → 目的地xy坐标（以脸图移入后的位置为原点）
#                         dx/dy → 基于当前位置，朝x/y移动的偏移值
#                         t     → 移动持续时间（帧）
   
#  □ 注意
#     脸图动作期间，对话框文字不暂停，请调用 wait 转义符等待。
#     若脸图正处于动作中，又有新的动作，则当前动作完毕后，只执行最后一个新动作。
#  □ 指引
#     关于脸图的缓动函数移动 可向上搜索“ase_value”设置 :face_xy

#  ？ 示例
#     编写对话：\facem[move|dx=50]  →  脸图朝右偏移50像素
#╚════════════════════════════════════════╝

#╔════════════════════════════════════════╗
# H■ 姓名框相关设置                                                    \NAME ■
#  ────────────────────────────────────────

#  ● \name[姓名|param]

#  · 姓名     → 输入显示的姓名，可添加VA默认转义符，[] 需要替换成 <>。
#                  如 \c<n> → 改变文字颜色， \i<n> → 显示图标等。
#              → 写入数字时，检测数据库角色序号，并显示对应序号的姓名。
#                  如 \name[1]  → 显示姓名“艾里克”。
#                     \name[999]→ 数据库不存在的序号，显示姓名“999”。
#     ---------------------------------------------------------------------
#  ◇ 姓名前统一增加的字符串（请将 \ 替换成 \e，将 [] 替换成 <> | 支持扩展\c[n]）

   ESCAPE_STRING_NAME_PREFIX = "\ec<6>"

#     ---------------------------------------------------------------------
#  ◇ 角色专属设置（写入数字时，在姓名前额外增加的字符串）(同上)

   ACTOR_NAME_PREFIX = {
      1 => "\ec<6>",
   }

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   NAME_PARAMS_INIT = {
     :o    => 7,       # 姓名框显示原点（对应小键盘九宫格 | 默认值为7 左上角）
     :do   => 0,       # 基于对话框的原点（对应小键盘九宫格 | 7 为对话框左上角）
                       #  * 若为 0 嵌入对话框，且 :o 自动设为 7
     :dx   => 0,       # 水平偏移值（正数向右，负数向左）
     :dy   => 0,       # 垂直偏移值（正数向下，负数向上）
     :opa  => 255,     # 姓名框背景不透明度（默认255）（不影响文字）
     :skin => nil,     # 姓名框皮肤序号（同 \win 中[预设]窗口皮肤）
                       #  * 若为 nil（$），与 \win 的窗口皮肤同步
     :size => nil,     # 字号。若为 nil（$），取VA默认（Font.）设置
     :bg   => nil,     # 图片窗口皮肤序号（见下方[预设]）* 覆盖:skin
     :bgo  => 7,       # 图片窗口皮肤的对齐原点（对应小键盘九宫格）
                       #  * 默认7，即背景图片的左上角与姓名框左上角对齐
     :cx   => 0,       # 文字的起始位置 x 坐标
     :cy   => 0,       # 文字的起始位置 y 坐标
   }
#     ---------------------------------------------------------------------
#  ◇ [预设]姓名框图片窗口皮肤（:bg）  > 素材文件存储于 Graphics/System 目录下

   INDEX_TO_NAME_BG = {
   # 序号 => 素材文件名（可省略后缀）
     1 => "",
   }
#     ---------------------------------------------------------------------
#  ◇ 自动调整姓名框位置，避免遮挡脸图
#  ├ 可用事件脚本 $game_message.no_name_overlap_face = true/false 开关该设置

   DEFAULT_NO_OVERLAP_FACE = false
   
#     ---------------------------------------------------------------------
#  ？ 示例
#     编写对话：\name[主人公|o1do9]这是测试对话。
#╚════════════════════════════════════════╝

#╔════════════════════════════════════════╗
# I■ 暂停标记（小箭头）                                               \PAUSE ■
#  ────────────────────────────────────────

#  ● \pause[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   PAUSE_PARAMS_INIT = {
     :id => 0,         #【快捷】暂停标记的序号（见下方[预设]）
                       #  * 若为 -1 =不显示，为 0 =当前对话框窗口皮肤
     :o  => 4,         # 暂停标记的显示原点（对应小键盘九宫格）
     :do => 0,         # 基于对话框的原点（对应小键盘九宫格）
                       #  * VA默认为 2 对话框底部正中，为 0 时显示在文末
     :dx => 0,         # 水平偏移值（正数向右，负数向左）
     :dy => 0,         # 垂直偏移值（正数向下，负数向上）
     :t  => 7,         # 每两帧之间的等待帧数（默认10）
     :v  => 1,         # 是否（1/0）显示暂停标记的帧动画
   }
#     ---------------------------------------------------------------------
#  ◇ [预设]暂停标记的帧动画（:id）   > 素材文件存储于 Graphics/System 目录下
#  ├                             > 帧动画素材以 从左到右，从上到下的顺序播放

   INDEX_TO_PAUSE = {
   # 序号 => [素材文件名，范围（nil为整张图），一行中的帧数，一列中的帧数]，
    -1 => ["", nil, 1, 1],                    # 不显示
     0 => [nil, Rect.new(96,64,32,32), 2, 2], # VA默认窗口皮肤中的“小箭头”
   }
#     ---------------------------------------------------------------------
#  ◇ 是否屏蔽默认的暂停标记
#  ├ 指VA默认在对话框底部正中的小箭头，推荐屏蔽

   NO_DEFAULT_PAUSE = true

#     ---------------------------------------------------------------------
#  ？ 示例
#     编写对话：测试对话。\pause[0o5do3dx-12dy-12]  → 暂停标记在对话框右下角
#╚════════════════════════════════════════╝

# -────────────────────────────────────────-
# J■ 对话框震动                                                       \SHAKE ■
# -────────────────────────────────────────-
#     与事件指令“震动画面”相同的对话框震动功能。震动时，文字暂停绘制。

#  ● \shake[param]

#  · param   ▼ 设定参数（字母+数字）：（可省略取默认值）
#                p  → 震动的强度（默认5）
#                s  → 震动的速度（默认5）
#                t  →【快捷】震动持续时间（帧）（默认60帧）
#                y  → 震动方向（0 为横向，1 为纵向）

#  ？ 示例
#     编写对话：啊！\shake[p3s7t15]吓死我了，还以为地震了。

# -────────────────────────────────────────-
# K■ 等待扩展                                                          \WAIT ■
# -────────────────────────────────────────-
   
#  ● \wait[t]     · t → 等待时间（帧） 
#                          同VA默认 \. \| 等转义符功能，可直接指定帧数

# -────────────────────────────────────────-
# L■ 文本瞬间显示                                                       \INS ■
# -────────────────────────────────────────-

#  ● \ins         □ 一次性绘制完全部文本，跳过全部等待转义符。

# -────────────────────────────────────────-
# M■ 暂时保留当前对话框　                                              \HOLD ■
# -────────────────────────────────────────-

#  ● \hold 或 \hold[str]

#  · str   →【可填】任意文本。
#              功能：标记当前对话框，直到再次呼出，关闭对应标记的对话框。

#  ？ 示例
#     顺序编写对话：
#     1. 编写对话：第一句对话。\hold[1]
#     2. 编写对话：第二句对话。\hold[2]
#     3. 编写对话：第三句对话。\hold[1]
#     4. 编写对话：第四句对话。
#     → 实际情况：第二句对话出现时，第一句对话仍保留在画面中。
#                  第三句对话出现时，\hold[1]生效，关闭第一句对话，第二句对话保留。
#                  第四句对话结束后，没有\hold，所以四句对话都关闭。

# -────────────────────────────────────────-
# O■ 强制关闭对话框                                                   \CLOSE ■
# -────────────────────────────────────────-

#  ● \close       □ VA默认对话框特性：有连续文本时，对话框不会一直打开、关闭，
#                     所用本指令可在当前对话结束后，强制关闭对话框。

# -────────────────────────────────────────-
# P■ 继续显示文本                                                      \NEXT ■
# -────────────────────────────────────────-

#  ● \next        □ 在当前对话框内，继续显示文本。
#                     当前对话使用\next，下一段对话文本也会显示在本对话框内。
#                     可以超过最大行数。

# -────────────────────────────────────────-
# Q■ 对话框清屏                                                         \CLC ■
# -────────────────────────────────────────-

#  ● \clc

#     ---------------------------------------------------------------------
#  ◇ 清屏持续时间（帧）
   CLC_CHARAS_OUT_FRAME = 20
   
#  □ 注意
#  ├ 执行时，已绘文字向上移出对话框，然后在新一行绘制剩余文字。
#     移出对话框的文字仍然可通过方向键滚动查看。
#  ├ 本功能需要固定对话框高度。动态高度会导致底部显示过多空白。
#╰────────────────────────────────────────╯

#  ·                              ······                              ·

#╭────────────────────────────────────────╮
#                              - 文字特效类转义符 -
#
#  □ 注意：本类转义符只对转义符之后的文字生效。
#  □【可叠加】标记：有此标记表示可叠加多个文字特效，没有的可能会产生奇怪效果。

#╔════════════════════════════════════════╗
#  ■ 默认启用的文字特效

   CHARA_PARAMS_INIT = {
   # 特效转义符名称 => 参数串（1：启用，0或不填：不启用 | 参数可省略取预设值）
     :cin => "1",       # 启用 文字移入 特效（预设参数配置）
     #:cout => "do6",    # 启用 文字移出 特效（并单独设定:do值）
   }
#╚════════════════════════════════════════╝

#╔════════════════════════════════════════╗
#                           + 【优先处理】的文字特效 +
# -────────────────────────────────────────-
# A■【基础】文字移入特效                                                 \CIN ■
# -────────────────────────────────────────-
#     文字移入完成后再执行其余文字特效。

#  ● \cin[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CIN_PARAMS_INIT = {
     :r   => 0,        # 下方参数数值随机取值 是否（1/0）
                       #    如 :va => 10 在 -10 ~ 10 之间随机取值
                       #    如 :t => 15 在 1 ~ 15 之间随机取值（t最小值是1）
     :t   => 15,       # 移入时间（帧）（最小1）* 不透明度从0递增至255的时间
     :do  => 0,        # 移入前文字所在位置
                       #   0     → 移入完毕后的位置（原地）
                       #   1~9   → 对话框中的位置（对应小键盘九宫格）
                       #   -1~-9 → 游戏屏幕上的位置（对应小键盘九宫格）
     :dx  => 0,        # 移入前所在位置的 水平偏移值（正数向右，负数向左）
     :dy  => 0,        # 移入前所在位置的 垂直偏移值（正数向下，负数向上）
     :vz  => 0,        # 每 :vzt 帧（最小1）文字缩放（0~100）% 的变动幅度
     :vzt => 1,        # ↑
     :va  => 0,        # 每帧 旋转角度（0~360）的变动幅度
     :vd  => 0,        # 旋转角度的方向（1 顺时针  -1 逆时针  0 随机方向）
     :vo  => 255,        # 每帧 不透明度的变动幅度（为 0 时取值 255/t）
     :rx  => 0,        # 每 :rxt 帧（最小1）单字切入的 x 值变动（src_rect.x）
     :rxt => 1,        # ↑
     :ry  => 0,        # 每 :ryt 帧（最小1）单字切入的 y 值变动（src_rect.y）
     :ryt => 1,        # ↑
     :togi => -1,      # 在移入过程中启用“杂音”特效（字符切换） 
     :togn => 0,       #  具体见 \ctog 的帮助
     :togt => 3,       #  如果没找到文字组，则不会开启
     :togr => 1,       #  在移入结束时将关闭，但不影响继续使用 \ctog
   }
#  □ 指引  → 关于缓动函数移动 可向上搜索“ease_value”设置 :chara_xy

# -────────────────────────────────────────-
# B■【基础】文字移出特效                                                \COUT ■
# -────────────────────────────────────────-

#  ● \cout[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   COUT_PARAMS_INIT = {
     :r   => 0,        # 下方参数数值随机取值 是否（1/0）
                       #    如 :va => 10 在 -10 ~ 10 之间随机取值
                       #    如 :t => 15 在 1 ~ 15 之间随机取值（t最小值是1）
     :t   => 15,       # 移出时间（帧）（最小1）* 不透明度从255递减至0的时间
     :do  => 0,        # 移出后文字所在位置
                       #   0     → 文字原地位置
                       #   1~9   → 对话框中的位置（对应小键盘九宫格）
                       #   -1~-9 → 游戏屏幕上的位置（对应小键盘九宫格）
     :dx  => 0,        # 移出后所在位置的 水平偏移值（正数向右，负数向左）
     :dy  => 0,        # 移出后所在位置的 垂直偏移值（正数向下，负数向上）
     :vz  => 0,        # 每 :vzt 帧（最小1）文字缩放（0~100）% 的变动幅度
     :vzt => 1,        # ↑
     :va  => 0,        # 每帧 旋转角度（0~360）的变动幅度
     :vd  => 0,        # 旋转角度的方向（1 顺时针  -1 逆时针  0 随机方向）
     :vo  => 0,        # 每帧 不透明度的变动幅度（为 0 时取值 255/t）
     :rx  => 0,        # 每 :rxt 帧（最小1）单字切出的 x 值变动（src_rect.x）
     :rxt => 1,        # ↑
     :ry  => 0,        # 每 :ryt 帧（最小1）单字切出的 y 值变动（src_rect.y）
     :ryt => 1,        # ↑
     :togi => -1,      # 在移入过程中启用“杂音”特效（字符切换） 
     :togn => 0,       #  具体见 \ctog 的帮助
     :togt => 3,       #  如果没找到文字组，则不会开启
     :togr => 1,       #  在移入结束时将关闭，但不影响继续使用 \ctog
   }
#  □ 指引  → 关于缓动函数移动 可向上搜索“ease_value”设置 :chara_xy

# -────────────────────────────────────────-
# C■【扩展】文字移出特效：位图消散                                      \UOUT ■
# -────────────────────────────────────────-
#  □ 需要前置脚本【Unravel_Bitmap】位图消散，请放于该脚本之上（左侧列表）。

#  ● \uout[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   UOUT_PARAMS_INIT = {
     :n   => 30,       # 消散的粒子总数（约值）
     :d   =>  2,       # 每个粒子的大小（直径/边长）
     :o   =>  1,       # 每个粒子消散时的不透明度变化的最小值
     :dir =>  5,       # 文字消散方向（见下方[预设]）
     :s   =>  0,       # 粒子的形状（见下方[预设]）
   }
#     ---------------------------------------------------------------------
#  ◇ [预设]文字消散方向（:dir）
#     > 请参考前置脚本【Unravel_Bitmap】中的注释

   CU_PARAM_DIR = {
     1 => :LD, 3 => :RD, 7 => :LU, 9 => :RU, # 四角斜方向（参考小键盘）
     2 => :DD, 4 => :RR, 6 => :LL, 8 => :UU, # 直线四方向（参考小键盘）
     0 => :LR, 5 => :LRUD,                   # <:LR-两侧><:LRUD-四周扩散>
     46 => :XX, 28 => :YY, 55 => :TEN,       # <:XX-横向><:YY-纵向><:TEN-十字>
   }
#     ---------------------------------------------------------------------
#  ◇ [预设]粒子的形状（:s）
   CU_PARAM_S = { 
     0 => :S,    # 正方形
     1 => :C,    # 圆形（耗算力易卡顿）
     2 => :T     # 三角形
   }
#     ---------------------------------------------------------------------
#  □ 注意！
#  ├【扩展】特效的优先级低于【基础】特效。
#     若 同一种特效 同时启用了【扩展】与【基础】两种，优先生效【基础】特效。
#  ├ 比如【基础】特效“\cout”已在“默认启用的文字特效”中启用，
#     在使用 \uout 时，需先关闭\cout。  
#     → 写法举例：\cout[0]\uout[1]文字内容。
#╚════════════════════════════════════════╝

#╔════════════════════════════════════════╗
#                               + 有趣的文字特效 +
# -────────────────────────────────────────-
# D■ 文字“花屏”特效（正弦波浪扭曲）                                   \CSIN ■
# -────────────────────────────────────────-

#  ● \csin[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CSIN_PARAMS_INIT = {
     :a => 6,          # 波浪幅度
     :l => 10,         # 波浪频度
     :s => 30,         # 波浪动画速度（最大360）
     :p => 0,          # 波浪相位角度（最大360°）（一般不需要设置）
   }
# -────────────────────────────────────────-
# E■ 文字“鱼泳”特效（上下起伏）                                      \CWAVE ■
# -────────────────────────────────────────-

#  ● \cwave[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CWAVE_PARAMS_INIT = {
     :h  => 2,         # 上下起伏的最大偏移值
     :t  => 4,         # 每一帧停留的时间（帧间隔）
     :vy => -1,        # 上下起伏的强度（正负数 决定第一帧是向下还是向上）
   }
# -────────────────────────────────────────-
# F■ 文字“摇摆”特效（本质精灵旋转）                                  \CWING ■
# -────────────────────────────────────────-

#  ● \cswing[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CSWING_PARAMS_INIT = {
     :d  => 0,         # 每 :t 旋转角度的值（正数 顺时针 | 负数 逆时针）
                       #  * 为 0 时取最大值，但初始摇摆方向随机
     :t  => 1,         # 每一帧停留的时间（帧间隔）
     :t2 => 15,        # 循环一次（角度到达最大值）的间隔（帧）
     :a  => 5,         # 角度可达的最大值（0~360）
     :o  => 8,         # 摇摆中心点（不动点）（对应小键盘九宫格）
   }
# -────────────────────────────────────────-
# G■ 文字“呼吸”特效（大小缩放）                                      \CZOOM ■
# -────────────────────────────────────────-

#  ● \czoom[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CZOOM_PARAMS_INIT = {
     :t   => 0,        # 每一帧停留的时间（帧间隔）
     :dx  => 2,        # 每 :t 横向缩放百分比（-100~100）
     :dy  => 0,        # 每 :t 纵向缩放百分比（-100~100）
     :o   => 5,        # 缩放中心点（不动点）（对应小键盘九宫格）
     :min => 0,        # 整体缩放量的最小值（最小0）
                       #  * 若使用“RGD”：最小-100，文字会反向
     :max => 100,      # 整体缩放量的最大值（最大100）
   }
# -────────────────────────────────────────-
# H■ 文字“颤抖”特效（反复位移）                                     \CSHAKE ■
# -────────────────────────────────────────-

#  ● \cshake[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CSHAKE_PARAMS_INIT = {
     :l   => 0,        # 向 左 的最大偏移值
     :r   => 1,        # 向 右 的最大偏移值
     :u   => 1,        # 向 上 的最大偏移值
     :d   => 1,        # 向 下 的最大偏移值
     :vx  => 0,        # 横向 初始移速（正数向右，负数向左，0 为随机方向）
     :vxt => 2,        # 横向 移动间隔（帧）
     :vy  => 0,        # 纵向 初始移速（正数向下，负数向上，0 为随机方向）
     :vyt => 1,        # 纵向 移动间隔（帧）
   }
# -────────────────────────────────────────-
# I■ 文字“震颤”特效（频率更大的“颤抖”）                          \CSHAKE2 ■
# -────────────────────────────────────────-

#  ● \cshake2[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）
   
   CSHAKE2_PARAMS_INIT = {
     :dx => 4,         # 横向震颤的最大距离（正负数相同）
                       #  * 比如 4 为 向左最大偏移4，向右最大偏移4
     :dy => 4,         # 纵向震颤的最大距离（正负数相同）
     :l  => 3,         # 震颤幅度
   }
# -────────────────────────────────────────-
# J■【可叠加】文字“闪烁”特效（本质精灵flash）                       \CFLASH ■
# -────────────────────────────────────────-

#  ● \cflash[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CFLASH_PARAMS_INIT = {
     :r => 255,        # 闪烁的颜色（红）
     :g => 255,        # 闪烁的颜色（绿）
     :b => 255,        # 闪烁的颜色（蓝）
     :a => 255,        # 闪烁的颜色（不透明度）
     :d => 60,         # 闪烁持续时间（帧）
     :t => 60,         # 循环一次的间隔（帧）
   }
# -────────────────────────────────────────-
# K■【可叠加】文字“镜像”特效（横向反转）                           \CMIRROR ■
# -────────────────────────────────────────-

#  ● \cmirror[param]  · param  →  1 启用（\cmirror[1]）； 0 关闭（\cmirror[0]）

   CMIRROR_PARAMS_INIT = {} # 无参数，不要修改。
   
# -────────────────────────────────────────-
# L■【扩展】【可叠加】文字“蒸汽”特效                                    \CU ■
# -────────────────────────────────────────-
#  □ 需要前置脚本【Unravel_Bitmap】位图消散，请放于该脚本之上（左侧列表）。

#  ● \cu[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CU_PARAMS_INIT = {
     :t   => 10,       # 循环一次的间隔（帧）
#  ·以下参数同 文字移出 \uout ：
     :n   => 20,       # 消散的粒子总数（约值）
     :d   =>  2,       # 每个粒子的大小（直径/边长）
     :o   =>  1,       # 每个粒子消散时的不透明度变化的最小值
     :dir =>  8,       # 文字消散方向（见\uout的[预设]）
     :s   =>  0,       # 粒子的形状（见\uout的[预设]）
   }
# -────────────────────────────────────────-
# M■【可叠加】文字“杂音”特效（字符切换）                               \CTOG ■
# -────────────────────────────────────────-

#  ● \ctog[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CTOG_PARAMS_INIT = {
     :i => 0,          # 字符组序号（见下方的[预设]）
     :n => 0,          # 在字符组中随机挑选字符的数量（若为 0 取全部）
     :t => 10,         # 字符切换的间隔（帧）
     :r => 1,          # 是否（1/0）启用字符组随机切换
   }
#     ---------------------------------------------------------------------
#  ◇ [预设]字符组（:i）
   CTOG_CHARAS = {
   # 序号 => 字符组（若填写数字，则取数据库 图标 序号）,
     0 => ['▀', '▄', '█', '▌', '✖'],
     1 => ['0','1','2','3','4','5','6','7','8','9'], # 显示 数字
     2 => [376,377,378,379,380,381,382,383],         # 显示 图标
   }
# -────────────────────────────────────────-
# N■【可叠加】文字“霓虹”特效（文字变色）                              \CNEON ■
# -────────────────────────────────────────-

#  ● \cneon[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）
   
   CNEON_PARAMS_INIT = {
     :t => 60,         # 颜色之间的切换间隔
#     c => n,          # 颜色序号（可多个）（同 \c 使用的序号）
                       #  * 从 当前颜色开始，按照传入顺序依次变化
   }
#  ？ 示例
#     编写对话：\cneon[t60c1c10c17]测试对话\cneon[0]。
#     →实际效果：文字颜色按照序号循环变化（0→1→10→17→1→10→17...）

# -────────────────────────────────────────-
# O■【可叠加】文字“叠字”特效（在文字上叠加字符）                        \CMC ■
# -────────────────────────────────────────-

#  ● \cmc[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）
   
   CMC_PARAMS_INIT = {
     :i => 0,          # 字符组序号（见下方的[预设]）
     :n => 0,          # 在字符组中随机挑选字符的数量（若为 0 取全部）
     :c => 10,         # 叠加文字颜色序号（同 \c 使用的序号 | -1 时与原文字颜色）
   }
#     ---------------------------------------------------------------------
#  ◇ [预设]字符组（:i）
   CMC_CHARAS = {
   # 序号 => 字符组（若填写数字，则取数据库 图标 序号）,
     0 => ['✖'],
     1 => [4],
   }
# -────────────────────────────────────────-
# P■ 文字“跳跃”特效                                                 \CJUMP ■
# -────────────────────────────────────────-

#  ● \cjump[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CJUMP_PARAMS_INIT = {
     :tc => 0,         # 跳跃前的等待帧数
     :t  => 20,        # 跳跃的持续时间（帧）
     :h  => 4,         # 跳跃的最大高度
     :w  => 60,        # 跳跃间隔 （为 nil（$）时只跳跃一次）
   }
# -────────────────────────────────────────-
# Q■ 文字“明灭”特效                                                   \CFK ■
# -────────────────────────────────────────-

#  ● \cfk[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）
   
   CFK_PARAMS_INIT = {
     :t => 30,         # 持续时间（帧）（不透明度从255到0的所用时间）
                       #  * 为 0 显隐切换，为 负数 取 0~|负数| 间的随机数
     :w => 60,         # 明灭间隔 （为 nil（$）时只明灭一次）
     :h => 1,          # 循环一次的结束点：为 1 时 在不透明度255时结束
                       #                  为 0 时 在不透明度0时结束
   }
#     ---------------------------------------------------------------------
#  ◇ 当 :t 为0时，显隐切换的间隔
   CFK_T0_WAIT = 20
   
# -────────────────────────────────────────-
# R■ 文字“消失”特效                                                 \CFADE ■
# -────────────────────────────────────────-

#  ● \cfade[param]

#     ---------------------------------------------------------------------
#  ◇ 预设参数         ▼ [param]“参数串”一览（字母+数字组合）

   CFADE_PARAMS_INIT = {
     :t => 10,         # 特效持续时间（帧）
     :v => 20,         # 每帧不透明度减少量
   }
# -────────────────────────────────────────-
# S■【扩展】【可叠加】文字“渐变色”特效                                  \CG ■
# -────────────────────────────────────────-
#  □ 需要前置脚本【Sion_GradientText】，请放于该脚本之上（左侧列表）。

#  ● \cg[c1..]       · c1.. → c + 颜色索引序号（同 \c 使用的序号），可多个。
#                               由上至下，纵向描绘渐变色。
#                               若为空[]，关闭渐变色绘制。

#  ？ 示例
#     编写对话：文字变成\cg[c1c2c1]渐变色\cg[]啦！
   
#╚════════════════════════════════════════╝
#╰────────────────────────────────────────╯

#  ·                              ······                              ·

#╭────────────────────────────────────────╮
#                                - 脚本类转义符 -
# -────────────────────────────────────────-
# A■ 执行脚本处理（高级）                                              \EVAL ■
# -────────────────────────────────────────-

#  ● \eval{string} 或 {{string}}

#  · string → Ruby脚本语句，可以用“ ; ”分隔多句，不可{x{x}}花括号套娃。
#               可用 s 代替 $game_switches（开关） v 代替 $game_variables（变量）
#               可用 msg 代表当前对话（Window_Message类的实例）
#               可用 last_chara 获取上一个文字精灵（注意：可能会被\cin覆盖设置）

#  □ 注意
#  ├ 因“文本替换类”的转义符优先级最高，所以对话框内的变量赋值不会生效。
#     → 例如 \eval{v[1]=5}\v[1]，\v[1]变量值仍然是0。
#
#  ？ 示例
#     编写对话：正在打开一号开关……\eval{s[1]=true} 一号开关已开启！

#╔════════════════════════════════════════╗
# B■ 文字打组功能                                                      \SET ■
#  ────────────────────────────────────────

#  ● \set[sym]  

#  · sym      → 分组名称。
#                 同一个文字可以被存入多个分组中；文字移出时清除全部分组；
#                 默认全部文字均在分组 0 内，因此 sym=0 时也代表取消分组。

#  □ 高级
#  ├ Window_EagleMessage 类新增方法 chara_set(sym) { |s| do_something }
#     该方法能够对 sym 分组中的全部文字精灵进行逐个处理。
#  ├ 若 不传入sym 或 传入 0 或 传入 '0' 或传入 ""，则对全部文字精灵进行处理。

#  ？ 示例
#     编写对话：这是\set[1]测试用\set[0]对话。
#     →实际效果：“测试用”三字分到组“1”。

# -────────────────────────────────────────-
# C■ 对分组文字启用特效                                                \SETM ■
# -────────────────────────────────────────-

#  ● \setm[sym|effect|param]

#  · sym      → 分组名称。
#  · effect   → 文字特效类的转义符的名称。如ctog
#  · param    → 对应各种转义符的“参数串”，为 0 则关闭特效

#  ？ 示例
#     1.编写对话：这是\ctog[1]测试用\ctog[0]对话。\wait[60]\setm[0|ctog|0]
#       →实际效果：文本显示完1s后，关闭全部文字的ctog特效。
#     2.编写对话：\set[1]\ctog[1]测试用文字\set[0]，\!第二句话。\setm[1|ctog|0]
#       →实际效果：对话结尾，仅关闭分组“1”中 “测试用文字” 的 ctog 特效。


#╚════════════════════════════════════════╝
#╰────────────────────────────────────────╯

#  ×                              ······                              ×

#==============================================================================
#                                 × 设定完毕 × 
#==============================================================================
end


