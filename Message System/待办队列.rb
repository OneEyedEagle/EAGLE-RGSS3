#==============================================================================
# ■ 待办队列 by 老鹰（https://github.com/OneEyedEagle/EAGLE-RGSS3）
# ※ 本插件需要放置在【组件-通用方法汇总 by老鹰】与
#   【组件-位图绘制转义符文本 by老鹰】之下
#==============================================================================
$imported ||= {}
$imported["EAGLE-TODOList"] = "1.1.0"
#==============================================================================
# - 2023.9.17.0 新增不显示划线动画
#==============================================================================
# - 本插件新增了一个显示在屏幕角落的TODO队列
#----------------------------------------------------------------------------
# ● 特点
#----------------------------------------------------------------------------
# - 对于全部待办事项，将按照权值由大到小的顺序进行动态排序
#
# - 待办事项被设置为完成后，权值将自动置为0，移动到最底部，
#   且有文字划线动画，最后移出并消除该待办事项
#
#------------------------------------------------------------------------------
# 【新增待办：事件指令-注释】
#
# - 在事件指令-注释中，编写该样式文本（需作为行首）
#
#       TODO|sym|tag字符串|文本
#
#    其中 TODO 为固定的识别文本，不可缺少
#    其中 sym 替换为该待办的唯一标识名称，之后将用该名称进行完成处理
#    其中 tag字符串 可以为以下类型文本的任意组合，用空格分隔（可不写）：
#
#       v=排序权值（越大的权值排序越高，若不填则取 1 ）
#       bg=该条待办的背景类型（0为窗口皮肤，1为纯色背景，2为透明，其它为图片名称）
#          （当填入 0 时，需要前置【组件-位图绘制窗口皮肤 by老鹰】）
#          （更具体的，可以见 "HINT_BG_TYPE" 的相关注释）
#       bgo=当使用图片作为背景时，图片的对齐模式
#          （具体见 "HINT_BGPIC_O" 的相关注释，比如 5 代表图片中心与通知的中心对齐，
#             比如 2 代表图片底部中心与通知文本的底部中心对齐）
#
#    其中 文本 为待办中显示的文本，可以用 \n 来进行换行，可以编写转义符
#
# 【注意】
#
# - 如果想要更新文本内容，只需要再写一次新增就好，将自动对旧待办进行更新、排序
#
# 【示例】
#
#    TODO|主线-初入江湖|v=5|快去找门外的王大妈领取你的第一把武器吧！
#      → 新增一个待办，权值为 5，唯一标识符为 "主线-初入江湖"
#
#    TODO|1-2||找出这个房间里的怪异点：0 / 5
#      → 新增一个权值为 1 的待办，唯一标识符为 "1-2"
#
#    TODO|1-2||找出这个房间里的怪异点：1 / 5
#      → 更新唯一标识符为 "1-2" 的待办
#
#------------------------------------------------------------------------------
# 【完成待办：事件指令-注释】
#
# - 在事件指令-注释中，编写该样式文本（需作为行首）
#
#       TODO|sym|FIN
#
#    其中 TODO 为固定的识别文本，不可缺少
#    其中 sym 替换为该待办的唯一标识名称，在新建待办时设置的
#    其中 FIN 为固定的识别文本，不可缺少
#
# 【示例】
#
#    TODO|主线-初入江湖|FIN
#      → 完成一个待办
#
#    TODO|1-2|FIN
#      → 完成一个待办
#
#------------------------------------------------------------------------------
# 【新增待办：全局脚本】
#
# - 在全局脚本中，使用Ruby脚本随时随地增加一条即时显示的待办
#
#       TODOLIST.add(sym, text, data={})
#
#    其中 sym 为该待办的唯一标识名称
#    其中 text 为该待办的文本内容
#    其中 data 为Hash，具体见该方法的注释
#
# 【示例】
#
#    TODOLIST.add("主线-初入江湖", "快去找门外的王大妈领取你的第一把武器吧！", {:v => 5})
#
#    TODOLIST.add("1-2", "找出这个房间里的怪异点：0 / 5")
#
#------------------------------------------------------------------------------
# 【完成待办：全局脚本】
#
# - 在全局脚本中，使用Ruby脚本完成指定的待办
#
#       TODOLIST.finish(sym, anim=true)
#
#    其中 sym 为该待办的唯一标识名称
#    其中 anim 为是否显示划线动画（默认 true 显示）
#
# 【示例】
#
#    TODOLIST.finish("主线-初入江湖")
#
#    TODOLIST.finish("1-2", false)
#
#------------------------------------------------------------------------------
# 【高级】
#
# - 利用全局脚本，对待办队列进行一些控制：
#
#    TODOLIST.move_out  → 移出全部的待办事项
#    TODOLIST.move_in   → 移入全部的待办事项
#    TODOLIST.show      → 显示全部的待办事项
#    TODOLIST.hide      → 隐藏全部的待办事项
#
#==============================================================================
module TODOLIST
  #--------------------------------------------------------------------------
  # ○【常量】设置参数
  #--------------------------------------------------------------------------
  PARAMS = {
  #-----------------------------------------------------------------
  # - 全部待办事项精灵的z值
  "Z" => 50,
  #-----------------------------------------------------------------
  # - 待办事项精灵的显示原点
  # （设置为 0~1 之间的小数为宽高比例值，大于1时为具体坐标值）
  "OX" => 0,
  "OY" => 0,
  #-----------------------------------------------------------------
  # - 待办事项精灵的初始XY
  "X" => 0,
  "Y" => 0,
  #-----------------------------------------------------------------
  # - 待办事项精灵的最终XY
  "X2" => 0,
  "Y2" => 0,

  #-----------------------------------------------------------------
  # - 待办事项的初始文字大小
  "FONT_SIZE" => Font.default_size,
  #-----------------------------------------------------------------
  # - 待办事项的初始文字颜色
  # （若填入 nil，则取窗口皮肤的 0 号颜色）
  "FONT_COLOR" => nil,
  #-----------------------------------------------------------------
  # - 待办事项的文字绘制的起始位置
  # （位图左上角为原点的坐标系）
  "TEXT_X" => 0,
  "TEXT_Y" => 0,
  #-----------------------------------------------------------------
  # - 待办事项的最大文字宽度，当超出时将自动换行
  # （若填入 nil，则不限制宽度）
  "TEXT_WIDTH" => nil,
  #-----------------------------------------------------------------
  # - 待办事项的文字右侧额外增加的留空
  "TEXT_W_ADD" => 0,
  #-----------------------------------------------------------------
  # - 待办事项的文字底部额外增加的留空
  "TEXT_H_ADD" => 0,

  #-----------------------------------------------------------------
  # - 待办事项的背景
  # （0 窗口皮肤，1 纯色背景，2 透明背景，字符串图片名称）
  "TEXT_BG" => 0,
  #-----------------------------------------------------------------
  # - BG为0时，设置所用的窗口皮肤
  "TEXT_BG0" => "Window",
  #-----------------------------------------------------------------
  # - BG为1时，设置所用的颜色
  "TEXT_BG1" => Color.new(0,0,0, 150),
  #-----------------------------------------------------------------
  # - BG为字符串时，设置图片哪个位置与文字绑定
  # （比如 2 代表图片底部中点绑定到文字区域的底部中点，
  #    5 代表图片中心绑定到文字区域的中心）
  "TEXT_BG_PIC" => 2,
  #-----------------------------------------------------------------
  # - 文字四周的留空值
  # （当使用图片背景时无效）
  "TEXT_PADDING" => 8,

  #-----------------------------------------------------------------
  # - 待办事项精灵之间的间隔高度
  "Y_OFFSET" => 4,
  #-----------------------------------------------------------------
  # - 待办事项精灵完成时的划线动画持续时间（因每一行独立处理划线，可能会有偏差）
  "OUT_LINE_TIME" => 30,
  #-----------------------------------------------------------------
  # - 待办事项精灵移出时的坐标变化值
  "OUT_DX" => -120,
  "OUT_DY" => 0,

  #-----------------------------------------------------------------
  } # 别删

  #--------------------------------------------------------------------------
  # ○【常量】事件指令-注释 中新增待办的文本
  #--------------------------------------------------------------------------
  COMMENT_TODOLIST = /^TODO *?\|(.*?)\| *?(.*?) *?\| *?(.*)/mi
  #--------------------------------------------------------------------------
  # ○【常量】事件指令-注释 中完成待办的文本
  #--------------------------------------------------------------------------
  COMMENT_TODOLIST_FIN = /^TODO *?\|(.*?)\|FIN/i
end
#===============================================================================
# ○ 不推荐修改下列内容
#===============================================================================
module TODOLIST
  #--------------------------------------------------------------------------
  # ● 新增
  # data = {
  #   :v => 1,  # 排序用数值，越大的排在前面（最小为 1）
  #   :bg => 0, # 背景类型（0窗口，1纯色，2透明，字符串图片）
  #   :bg0 => "Window",  # 窗口皮肤名称
  #   :bg1 => Color.new, # 颜色
  #   :bgo => 1,         # 图片背景的对齐方式
  # }
  #--------------------------------------------------------------------------
  def self.add(sym, text, data = {})
    $game_system.eagle_todo_list ||= {}
    # 占用 :text 来存储绘制的文本
    data[:text] = text
    data[:v] = data[:v].to_i if data[:v]
    $game_system.eagle_todo_list[sym] = data
    # 直接在此处增加精灵
    s = get(sym)
    if s
      s.reset(sym)
    else
      add_new_sprite(sym)
    end
    need_refresh
  end
  #--------------------------------------------------------------------------
  # ● 完成
  #--------------------------------------------------------------------------
  def self.finish(sym, anim=true)
    s = get(sym)
    s.finish(anim) if s
  end
  #--------------------------------------------------------------------------
  # ● 查找指定精灵
  #--------------------------------------------------------------------------
  def self.get(sym)
    @sprites.each { |s| return s if s.sym == sym }
    return nil
  end
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def self.init
    @sprites = []
    @sprites_fin = []
    $game_system.eagle_todo_list ||= {}
    $game_system.eagle_todo_list.each { |sym, data| add_new_sprite(sym, data) }
    need_refresh
  end
  #--------------------------------------------------------------------------
  # ● 新增一个精灵
  #--------------------------------------------------------------------------
  def self.add_new_sprite(sym)
    if @sprites_fin.empty?
      s = Sprite_EagleTodo.new(nil, sym)
    else
      s = @sprites_fin.shift
      s.reset(sym)
    end
    @sprites.push(s)
  end
  #--------------------------------------------------------------------------
  # ● 更新
  #--------------------------------------------------------------------------
  def self.update
    refresh if @flag_need_refresh
    @sprites.each do |s|
      s.update
      @sprites_fin.push(s) if s.finish?
    end
    @sprites.delete_if { |s| s.finish? }
  end
  #--------------------------------------------------------------------------
  # ● 需要刷新精灵组
  #--------------------------------------------------------------------------
  def self.need_refresh
    @flag_need_refresh = true
  end
  #--------------------------------------------------------------------------
  # ● 刷新
  #--------------------------------------------------------------------------
  def self.refresh
    rerank
    @flag_need_refresh = false
  end
  #--------------------------------------------------------------------------
  # ● 重新排序
  #--------------------------------------------------------------------------
  def self.rerank
    @sprites = @sprites.sort_by { |s| -s.value }
    _x = PARAMS["X2"]
    _y = PARAMS["Y2"]
    offset = PARAMS["Y_OFFSET"]
    @sprites.each_with_index do |s, i|
      s.set_des_xy(_x, _y)
      _x += 0
      _y += s.height + offset
    end
  end
  #--------------------------------------------------------------------------
  # ● 显示
  #--------------------------------------------------------------------------
  def self.show
    @sprites.each { |s| s.visible = true }
  end
  #--------------------------------------------------------------------------
  # ● 隐藏
  #--------------------------------------------------------------------------
  def self.hide
    @sprites.each { |s| s.visible = false }
  end
  #--------------------------------------------------------------------------
  # ● 移入
  #--------------------------------------------------------------------------
  def self.move_in
    @sprites.each { |s| s.move_in }
    need_refresh
  end
  #--------------------------------------------------------------------------
  # ● 移出
  #--------------------------------------------------------------------------
  def self.move_out
    @sprites.each { |s| s.move_out }
  end
end
#===============================================================================
# ○ Game_System
#===============================================================================
class Game_System
  attr_accessor  :eagle_todo_list
end
#===============================================================================
# ○ Scene_Base
#===============================================================================
class Scene_Base
  #--------------------------------------------------------------------------
  # ● 基础更新
  #--------------------------------------------------------------------------
  alias eagle_todo_list_update_basic update_basic
  def update_basic
    eagle_todo_list_update_basic
    TODOLIST.update
  end
end
#===============================================================================
# ○ SceneManager
#===============================================================================
class << SceneManager
  #--------------------------------------------------------------------------
  # ● 截图
  #--------------------------------------------------------------------------
  alias eagle_todo_list_snapshot_for_background snapshot_for_background
  def snapshot_for_background
    TODOLIST.hide
    eagle_todo_list_snapshot_for_background
    TODOLIST.show
  end
end
#===============================================================================
# ○ DataManager
#===============================================================================
class << DataManager
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  alias eagle_todo_list_init init
  def init
    eagle_todo_list_init
    TODOLIST.init
  end
end
#===============================================================================
# ○ Sprite_EagleTodo
#===============================================================================
class Sprite_EagleTodo < Sprite
  include TODOLIST
  attr_reader :sym, :value
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize(viewport, sym)
    super(viewport)
    reset(sym)
  end
  #--------------------------------------------------------------------------
  # ● 重置
  #--------------------------------------------------------------------------
  def reset(sym)
    @sym = sym
    @params_move = { :active => false }
    @value = [data[:v] || 1, 1].max  # 排序用数值
    @text_rects = []   # 每一行文字的矩形
    redraw
    reset_position
    @finish = false
    @d_opa = 0
    self.opacity = 255
  end
  #--------------------------------------------------------------------------
  # ● 重设为初始预设位置
  #--------------------------------------------------------------------------
  def reset_position
    set_oxy(PARAMS["OX"], PARAMS["OY"])
    set_xy(PARAMS["X"], PARAMS["Y"])
    self.z = PARAMS["Z"]
  end
  #--------------------------------------------------------------------------
  # ● 获取数据Hash
  #--------------------------------------------------------------------------
  def data
    $game_system.eagle_todo_list[@sym]
  end
  #--------------------------------------------------------------------------
  # ● 绘制内容
  #--------------------------------------------------------------------------
  def redraw
    params = { :font_size => PARAMS["FONT_SIZE"],
      :x0 => 0, :y0 => 0, :lhd => 4,
      :w => PARAMS["TEXT_WIDTH"],
      :ali => 0,
    }
    if PARAMS["FONT_COLOR"]
      params[:font_color] = PARAMS["FONT_COLOR"]
    end
    d = Process_DrawTextEX.new(data[:text], params)
    d.run(false)
    params[:text_w] = d.width
    params[:text_h] = d.height
    self.bitmap.dispose if self.bitmap
    redraw_contents(params)
    # 绘制文字
    d.bind_bitmap(self.bitmap)
    d.run(true)
    @text_rects = d.info[:rects]
  end
  #--------------------------------------------------------------------------
  # ● 绘制内容背景
  #--------------------------------------------------------------------------
  def redraw_contents(params)
    w = params[:text_w] + PARAMS["TEXT_X"] + PARAMS["TEXT_W_ADD"]
    h = params[:text_h] + PARAMS["TEXT_Y"] + PARAMS["TEXT_H_ADD"]
    params[:x0] = PARAMS["TEXT_X"]
    params[:y0] = PARAMS["TEXT_Y"]
    # 获取背景类型
    bg_type = PARAMS["TEXT_BG"]
    if data[:bg]
      bg_type = data[:bg]
      bg_type = bg_type.to_i if bg_type.size == 1 && bg_type.to_i >= 0
    end
    # 处理四周的留白
    padding = PARAMS["TEXT_PADDING"]
    padding = 0 if bg_type.is_a?(String)  # 图片背景
    params[:x0] += padding  # 文字绘制的左上角增加padding
    params[:y0] += padding
    w += padding * 2 # 宽高增加
    h += padding * 2
    # 绘制背景
    if bg_type == 0  # 绘制windowskin
      self.bitmap = Bitmap.new(w, h)
      skin = data[:bg0] || PARAMS["TEXT_BG0"]
      begin
        r = Rect.new(0, 0, self.width, self.height)
        EAGLE.draw_windowskin(skin, self.bitmap, r)
      rescue
      end
    elsif bg_type == 1  # 绘制纯色背景
      self.bitmap = Bitmap.new(w, h)
      c = data[:bg1] || PARAMS["TEXT_BG1"]
      self.bitmap.fill_rect(self.bitmap.rect, c)
    elsif bg_type == 2  # 透明背景
      self.bitmap = Bitmap.new(w, h)
    elsif bg_type.is_a?(String)  # 图片背景
      _b = Cache.system(bg_type) rescue nil
      if _b
        self.bitmap = Bitmap.new([w, _b.width].max, [h, _b.height].max)
        o = data[:bgpic] || PARAMS["TEXT_BG_PIC"]
        EAGLE_COMMON.bitmap_copy_do(self.bitmap, _b, o.to_i)
      else
        self.bitmap = Bitmap.new(w, h)
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● 直接指定oxy
  #--------------------------------------------------------------------------
  def set_oxy(ox = nil, oy = nil)
    if ox
      self.ox = self.width * ox if ox <= 1
      self.ox = ox if ox > 1
    end
    if oy
      self.oy = self.height * oy if oy <= 1
      self.oy = oy if oy > 1
    end
  end
  #--------------------------------------------------------------------------
  # ● 直接指定xy
  #--------------------------------------------------------------------------
  def set_xy(x = nil, y = nil)
    @x0 = x || self.x
    @y0 = y || self.y
    @dx = 0
    @dy = 0
    update_position
    @params_move[:active] = false
  end
  #--------------------------------------------------------------------------
  # ● 直接修改xy
  #--------------------------------------------------------------------------
  def set_dxy(dx = 0, dy = 0)
    set_xy(self.x + dx, self.y + dy)
  end
  #--------------------------------------------------------------------------
  # ● 指定目的xy
  #--------------------------------------------------------------------------
  def set_des_xy(des_x = nil, des_y = nil)
    return if des_x == nil && des_y == nil
    set_xy
    @params_move = {}
    @params_move[:t] =20
    @params_move[:i] = 0
    @params_move[:des_x] = des_x
    @params_move[:des_y] = des_y
    @params_move[:dx_init] = 0
    @params_move[:dy_init] = 0
    @params_move[:dx_d] = des_x - self.x
    @params_move[:dy_d] = des_y - self.y
    @params_move[:active] = true
  end
  #--------------------------------------------------------------------------
  # ● 指定目的xy（偏移量）
  #--------------------------------------------------------------------------
  def set_des_dxy(des_dx = 0, des_dy = 0)
    set_des_xy(self.x + des_dx, self.y + des_dy)
  end
  #--------------------------------------------------------------------------
  # ● 更新
  #--------------------------------------------------------------------------
  def update
    update_position
    update_move if @params_move[:active]
    update_opacity
    @fiber.resume if @fiber
  end
  #--------------------------------------------------------------------------
  # ● 更新位置
  #--------------------------------------------------------------------------
  def update_position
    self.x = @x0 + @dx
    self.y = @y0 + @dy
  end
  #--------------------------------------------------------------------------
  # ● 更新缓动
  #--------------------------------------------------------------------------
  def update_move
    @params_move[:i] += 1
    per = @params_move[:i] * 1.0 / @params_move[:t]
    f = @params_move[:i] == @params_move[:t]
    per = (f ? 1 : ease_value(per))
    @dx = @params_move[:dx_init] + @params_move[:dx_d] * per
    @dy = @params_move[:dy_init] + @params_move[:dy_d] * per
    if f
      set_xy(@params_move[:des_x], @params_move[:des_y])
      @params_move[:active] = false
    end
  end
  #--------------------------------------------------------------------------
  # ● 缓动函数
  #--------------------------------------------------------------------------
  def ease_value(v)
    if $imported["EAGLE-EasingFunction"]
      return EasingFuction.call("easeOutBack", v)
    end
    return 1 - 2**(-10 * v)
  end
  #--------------------------------------------------------------------------
  # ● 更新透明度
  #--------------------------------------------------------------------------
  def update_opacity
    self.opacity += @d_opa
  end
  #--------------------------------------------------------------------------
  # ● 完成
  #--------------------------------------------------------------------------
  def finish(anim = true)
    @value = 0
    TODOLIST.need_refresh
    @fiber = Fiber.new { 
      fiber_finish if anim
      fiber_finish_no_anim
    }
  end
  #--------------------------------------------------------------------------
  # ● 完成？
  #--------------------------------------------------------------------------
  def finish?
    @finish == true
  end
  #--------------------------------------------------------------------------
  # ● 处理划线完成时的动画
  #--------------------------------------------------------------------------
  def fiber_finish
    # 计算总划线长度，获取每帧内的划线长度
    _w_sum = 0
    @text_rects.each do |r|
      _x1 = PARAMS["TEXT_PADDING"] + r.x + 1
      _x2 = PARAMS["TEXT_PADDING"] + r.x + r.width - 1
      _w_sum += (_x2 - _x1)
    end
    _t = PARAMS["OUT_LINE_TIME"]
    _w = _w_sum * 1.0 / _t
    
    _c = Color.new(255, 255, 255, 255)
    @text_rects.each do |r|
      _x = PARAMS["TEXT_PADDING"] + r.x + 1
      _x2 = PARAMS["TEXT_PADDING"] + r.x + r.width - 1
      _y = PARAMS["TEXT_PADDING"] + r.y + r.height / 2 + 1
      loop do
        _v = _x2 - _x
        break if _v <= 0
        _w_temp = [_v, _w].min 
        self.bitmap.fill_rect(_x, _y, _w_temp, 1, _c)
        _x += _w_temp
        Fiber.yield
      end
    end
    30.times { Fiber.yield }
  end
  #--------------------------------------------------------------------------
  # ● 结束（无划线动画）
  #--------------------------------------------------------------------------
  def fiber_finish_no_anim
    move_out
    30.times { Fiber.yield }
    @finish = true
    self.opacity = 0
    $game_system.eagle_todo_list.delete(@sym)
    @fiber = nil
  end
  #--------------------------------------------------------------------------
  # ● 移入
  #--------------------------------------------------------------------------
  def move_in
    @d_opa = 9
    reset_position
  end
  #--------------------------------------------------------------------------
  # ● 移出
  #--------------------------------------------------------------------------
  def move_out
    @d_opa = -9
    set_des_dxy(PARAMS["OUT_DX"], PARAMS["OUT_DY"])
  end
end

#===============================================================================
# ○ Game_Interpreter
#===============================================================================
class Game_Interpreter
  #--------------------------------------------------------------------------
  # ● 添加注释
  #--------------------------------------------------------------------------
  alias eagle_todo_list_command_108 command_108
  def command_108
    eagle_todo_list_command_108
    t = @comments.inject { |t, v| t = t + "\n" + v }
    t.scan(TODOLIST::COMMENT_TODOLIST).each do |v|
      sym = v[0]
      ps = v[1].lstrip.rstrip  # tags string  # 去除前后空格
      ps = EAGLE_COMMON.parse_tags(ps)
      t = v[2]  # text
      TODOLIST.add(sym, t, ps)
    end
    t.scan(TODOLIST::COMMENT_TODOLIST_FIN).each do |v|
      sym = v[0]
      TODOLIST.finish(sym)
    end
  end
end
