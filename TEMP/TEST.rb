#==============================================================================
# ■ UI系统 by 老鹰（http://oneeyedeagle.lofter.com/）
#==============================================================================
$imported ||= {}
$imported["EAGLE-UISystem"] = true
#=============================================================================
# - 2019.10.20.18
#=============================================================================
# - 本插件提供了对简单精灵UI的生成及控制
#-----------------------------------------------------------------------------
# - 生成并绑定新的UI精灵（在Scene切换时自动释放）
#      EAGLE_UI.new(sym, params)
#   其中 sym 为该UI精灵的唯一标识符
#   其中 params 为下列参数的Hash
#     :viewport → 设置显示的视图
#
# - 获取指定 sym 的UI精灵，并赋值给变量 s（若无精灵，则返回 nil）
#      s = EAGLE_UI.get(sym)
#
#=============================================================================

module EAGLE_UI
  #--------------------------------------------------------------------------
  # ● 生成新的UI精灵
  #--------------------------------------------------------------------------
  def self.new(sym, params)
    vp = params[:viewport] ? params[:viewport] : nil
    s = Eagle_UI_Sprite.new(vp, params)
    @uis[sym].dispose if @uis[sym]
    @uis[sym] = s
    s
  end
  #--------------------------------------------------------------------------
  # ● 获取UI精灵
  #--------------------------------------------------------------------------
  def self.get(sym)
    @uis[sym]
  end
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def self.init
    @uis = {} # sym => Sprite
  end
  #--------------------------------------------------------------------------
  # ● 更新
  #--------------------------------------------------------------------------
  def self.update
  end
  #--------------------------------------------------------------------------
  # ● 清除
  #--------------------------------------------------------------------------
  def self.clear
    @uis.each { |s| s.dispose }
    @uis.clear
  end
end
#=============================================================================
# ○ UI精灵
#=============================================================================
class Eagle_UI_Sprite < Sprite
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize(viewport, params)
    super(viewport)
    @params = params
    @event_list = {}
  end
  #--------------------------------------------------------------------------
  # ● 释放
  #--------------------------------------------------------------------------
  def dispose
    super
    self.bitmap.dispose if self.bitmap
  end
  #--------------------------------------------------------------------------
  # ● 绑定方法
  #--------------------------------------------------------------------------
  def bind(sym, method)
    @event_list[sym] = method
  end
end
#=============================================================================
# ○ 绑定
#=============================================================================
class << DataManager
  #--------------------------------------------------------------------------
  # ● 初始化模块
  #--------------------------------------------------------------------------
  alias eagle_eui_init init
  def init
    eagle_eui_init
    EAGLE_UI.init
  end
end
class Scene_Base
  #--------------------------------------------------------------------------
  # ● 基础更新
  #--------------------------------------------------------------------------
  alias eagle_eui_update_basic update_basic
  def update_basic
    eagle_eui_update_basic
    EAGLE_UI.update
  end
  #--------------------------------------------------------------------------
  # ● 结束处理
  #--------------------------------------------------------------------------
  alias eagle_eui_terminate terminate
  def terminate
    eagle_eui_terminate
    EAGLE_UI.clear
  end
end
