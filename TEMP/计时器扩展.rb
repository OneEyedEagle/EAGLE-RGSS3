#==============================================================================
# ■ 计时器扩展 by 老鹰（http://oneeyedeagle.lofter.com/）
#==============================================================================
$imported ||= {}
$imported["EAGLE-TimerEX"] = true
#=============================================================================
# - 2019.4.7.22
#=============================================================================
# - TODO id => Data_Timer
#-----------------------------------------------------------------------------
# ●
#-----------------------------------------------------------------------------
#=============================================================================

module Timer
  #--------------------------------------------------------------------------
  # ● 设定指定ID计时器的对应ICON和显示帮助信息
  #--------------------------------------------------------------------------
  INFO = {
    # switch_id => [icon_id, help_text],
    0 => [0, ""], # 默认计时器
    1 => [1, "测试用帮助"],
  }
  #--------------------------------------------------------------------------
  # ● 获取对应信息
  #--------------------------------------------------------------------------
  def self.get_icon(id)
    return INFO[id][0] if INFO.has_key?(id) && INFO[id][0]
    return INFO[0][0]
  end
  def self.get_info(id)
    return INFO[id][1] if INFO.has_key?(id) && INFO[id][1]
    return INFO[0][1]
  end
  #--------------------------------------------------------------------------
  # ● 开始id号的计时器
  #  id - 不为0的整数
  #   id为正时，计时器开始时开启开关，结束时关闭
  #   id为负时，计时器结束时才开启开关
  #  sec_count - 存在的秒数
  #  icon_id - 指定显示的图标
  #--------------------------------------------------------------------------
  def self.start(id, sec_count)
    $game_timer.start(sec_count * 60, id, get_icon(id))
  end
  #--------------------------------------------------------------------------
  # ● 暂停id号的计时器
  #--------------------------------------------------------------------------
  def self.halt(id)
    $game_timer.halt(id)
  end
  #--------------------------------------------------------------------------
  # ● 重新开始id号计时器
  #--------------------------------------------------------------------------
  def self.restart(id)
    $game_timer.restart(id)
  end
  #--------------------------------------------------------------------------
  # ● 停止指定id号的计时器
  #--------------------------------------------------------------------------
  def self.stop(id)
    $game_timer.stop(id)
  end
end

class Scene_Map < Scene_Base
  #--------------------------------------------------------------------------
  # ● 结束处理
  #--------------------------------------------------------------------------
  alias eagle_timer_terminate terminate
  def terminate
    @spriteset.timer_sprite.hide
    eagle_timer_terminate
  end
end
class Spriteset_Map
  attr_reader :timer_sprite
end

class Game_Timer
  attr_reader :timers
  #--------------------------------------------------------------------------
  # ● 初始化对象
  #--------------------------------------------------------------------------
  def initialize
    # switch_id => { :working => bool, :count => int, :icon_id => int }
    @timers = {}
    start(0)
    stop(0)
  end
  #--------------------------------------------------------------------------
  # ● 更新画面
  #--------------------------------------------------------------------------
  def update
    @timers.each do |id, value|
      next if !value[:working]
      next stop(id) if value[:count] <= 0
      value[:count] -= 1
      #on_expire if @count == 0
    end
  end
  #--------------------------------------------------------------------------
  # ● 开始
  #--------------------------------------------------------------------------
  def start(count, id = 0, icon_id = 0)
    @timers.delete_if { |k, v| k.abs == id.abs }
    @timers[id] = { :working => true, :count => count, :icon_id => icon_id }
    $game_switches[id.abs] = id > 0 if id != 0
  end
  #--------------------------------------------------------------------------
  # ● 暂停
  #--------------------------------------------------------------------------
  def halt(id = 0)
    @timers[id][:working] = false
    $game_switches[id.abs] = id > 0 if id != 0
  end
  #--------------------------------------------------------------------------
  # ● 重开
  #--------------------------------------------------------------------------
  def restart(id = 0)
    @timers[id][:working] = true
    $game_switches[id.abs] = id > 0 if id != 0
  end
  #--------------------------------------------------------------------------
  # ● 停止
  #--------------------------------------------------------------------------
  def stop(id = 0)
    @timers[id][:working] = false
    @timers[id][:count] = 0
    $game_switches[id.abs] = id < 0 if id != 0
  end
  #--------------------------------------------------------------------------
  # ● 判定是否正在工作
  #--------------------------------------------------------------------------
  def working?(id = 0)
    @timers[id][:working]
  end
  #--------------------------------------------------------------------------
  # ● 获取图标
  #--------------------------------------------------------------------------
  def icon(id = 0)
    @timers[id][:icon_id]
  end
  #--------------------------------------------------------------------------
  # ● 获取秒数
  #--------------------------------------------------------------------------
  def sec(id = 0)
    @timers[id][:count] / Graphics.frame_rate
  end
  #--------------------------------------------------------------------------
  # ● 获取毫秒数
  #--------------------------------------------------------------------------
  def msec(id = 0)
    f = @timers[id][:count] - sec(id) * Graphics.frame_rate
    # 3 帧 = 50 ms
    #f * 50 / 3
    f * 17 - f / 3
  end
  #--------------------------------------------------------------------------
  # ● 计时器为 0 时的处理
  #--------------------------------------------------------------------------
  def on_expire
    #BattleManager.abort
  end
end

class Sprite_Timer < Sprite
  #--------------------------------------------------------------------------
  # ● 初始化对象
  #--------------------------------------------------------------------------
  def initialize(viewport)
    super(viewport)
    @viewport = viewport
    @timers = {}
    update
  end
  #--------------------------------------------------------------------------
  # ● 释放
  #--------------------------------------------------------------------------
  def dispose
    @timers.each { |id, t| t.dispose }
    super
  end
  #--------------------------------------------------------------------------
  # ● 更新画面
  #--------------------------------------------------------------------------
  def update
    super
    update_new
    update_position
  end
  #--------------------------------------------------------------------------
  # ● 新加入计数器精灵
  #--------------------------------------------------------------------------
  def update_new
    $game_timer.timers.each do |id, t|
      next if @timers.has_key?(id)
      @timers[id] = Sprite_Timer_Single.new(@viewport, id, -1)
      @timers[id].set_xy(Graphics.width - 2 - @timers[id].width,Graphics.height)
      @timers[id].z = 200
    end
  end
  #--------------------------------------------------------------------------
  # ● 更新位置
  #--------------------------------------------------------------------------
  def update_position
    # 从屏幕右下角开始，逐渐向上增加
    index = -1 # 用于暂存当前屏幕坐标index
    @timers.each do |id, t|
      t.update
      t.visible = $game_timer.working?(id)
      if t.visible
        # 此处更新帮助信息显示
        if t.chosen_by_mouse? && ((text = Timer.get_info(id)) != "")
          p = { :text => text, :dir => :RD }
          p[:window_skin] = "Window_Help"
          p[:tag] = "Window_Help_Tag"
          HintManager.add(p, :block_zoom_instant2)
        else
          HintManager.move_out(:block_zoom_instant2)
        end
        # 此处更新显示位置
        index += 1
        next if t.window_index == index
        t.window_index = index
        _y = Graphics.height- t.height * (t.window_index + 1) - 2
        _y -= (2 * t.window_index)
        t.set_des_xy(Graphics.width - t.width - 2, _y)
      end
    end
  end
  #--------------------------------------------------------------------------
  # ● 显示
  #--------------------------------------------------------------------------
  def show
    @timers.each { |id, t| t.visible = true }
  end
  #--------------------------------------------------------------------------
  # ● 隐藏
  #--------------------------------------------------------------------------
  def hide
    @timers.each { |id, t| t.visible = false }
  end
end

class Sprite_Timer_Single < Sprite
  attr_accessor :window_index
  #--------------------------------------------------------------------------
  # ● 初始化对象
  #--------------------------------------------------------------------------
  def initialize(viewport, id, index)
    super(viewport)
    @id = id
    @window_index = index
    @des_x = @des_y = 0
    create_bitmap
    update
  end
  #--------------------------------------------------------------------------
  # ● 释放
  #--------------------------------------------------------------------------
  def dispose
    self.bitmap.dispose
    super
  end
  #--------------------------------------------------------------------------
  # ● 生成位图
  #--------------------------------------------------------------------------
  def create_bitmap
    @bg_bitmap = Bitmap.new(90, 40)
    EAGLE::DRAW_WINDOWSKIN.draw(@bg_bitmap, "Window_Timer")
    _bitmap = Cache.system("Window_Timer"); _x = 48
    while(_x < @bg_bitmap.width - 16)
      @bg_bitmap.clear_rect(_x, 0, 16, 7)
      @bg_bitmap.blt(_x, 2, _bitmap, Rect.new(0, 0, 16, 5))
      @bg_bitmap.blt(_x, 0, _bitmap, Rect.new(90, 0, 16,7))
      _x += 16
    end
    draw_icon(@bg_bitmap, $game_timer.icon(@id), 8, 8, true)
    self.bitmap = Bitmap.new(90, 40)
    #self.bitmap.font.size = 20
    self.bitmap.font.color.set(255, 255, 255)
  end
  #--------------------------------------------------------------------------
  # ● 绘制图标
  #     enabled : 有效的标志。false 的时候使用半透明效果绘制
  #--------------------------------------------------------------------------
  def draw_icon(bitmap, icon_index, x, y, enabled = true)
    _bitmap = Cache.system("Iconset")
    rect = Rect.new(icon_index % 16 * 24, icon_index / 16 * 24, 24, 24)
    bitmap.blt(x, y, _bitmap, rect, enabled ? 255 : 120)
  end
  #--------------------------------------------------------------------------
  # ● 设置实际坐标，会重置目的xy
  #--------------------------------------------------------------------------
  def set_xy(x, y)
    self.x = @des_x = x
    self.y = @des_y = y
  end
  #--------------------------------------------------------------------------
  # ● 设置目的坐标
  #--------------------------------------------------------------------------
  def set_des_xy(x, y)
    @des_x = x
    @des_y = y
  end
  #--------------------------------------------------------------------------
  # ● 更新画面
  #--------------------------------------------------------------------------
  def update
    super
    update_bitmap
    update_xy
  end
  #--------------------------------------------------------------------------
  # ● 更新源位图（Source Bitmap）
  #--------------------------------------------------------------------------
  def update_bitmap
    if $game_timer.sec(@id) != @total_sec
      @total_sec = $game_timer.sec(@id)
      self.bitmap.clear
      self.bitmap.blt(0, 0, @bg_bitmap, Rect.new(0,0,self.width,self.height))
      text = sprintf("%02d:%02d", @total_sec / 60, @total_sec % 60)
      self.bitmap.draw_text(34, 8, 48, 24, text, 1)
    end
  end
  #--------------------------------------------------------------------------
  # ● 更新位置
  #--------------------------------------------------------------------------
  def update_xy
    3.times do
      break if @des_x == self.x
      self.x += (@des_x > self.x ? 1 : -1)
    end
    4.times do
      break if @des_y == self.y
      self.y += (@des_y > self.y ? 1 : -1)
    end
  end
end
